handle('{"event":"start","example_count":1456}');
handle('{"progress":0.0}');
handle('{"group":"Autotest::Rspec discovery","description":"adds the rspec autotest plugin","status":"passed"}');
handle('{"progress":0.1}');
handle('{"group":"failed_results_re","description":"should match a failure","status":"passed"}');
handle('{"progress":0.2}');
handle('{"group":"failed_results_re","description":"should match a failure when matcher outputs multiple lines","status":"passed"}');
handle('{"progress":0.2}');
handle('{"group":"failed_results_re","description":"should match an Error","status":"passed"}');
handle('{"progress":0.3}');
handle('{"group":"failed_results_re","description":"should match an Error that doesn\'t end in Error","status":"passed"}');
handle('{"progress":0.4}');
handle('{"group":"Autotest::Rspec adding spec.opts --options","description":"should return the command line option to add spec.opts if the options file exists","status":"passed"}');
handle('{"progress":0.4}');
handle('{"group":"Autotest::Rspec adding spec.opts --options","description":"should return an empty string if no spec.opts exists","status":"passed"}');
handle('{"progress":0.5}');
handle('{"group":"Autotest::Rspec commands","description":"should make the appropriate test command","status":"passed"}');
handle('{"progress":0.6}');
handle('{"group":"Autotest::Rspec commands","description":"should return a blank command for no files","status":"passed"}');
handle('{"progress":0.6}');
handle('{"group":"Autotest::Rspec mappings","description":"should find the spec file for a given lib file","status":"passed"}');
handle('{"progress":0.7}');
handle('{"group":"Autotest::Rspec mappings","description":"should find the spec file if given a spec file","status":"passed"}');
handle('{"progress":0.8}');
handle('{"group":"Autotest::Rspec mappings","description":"should ignore files in spec dir that aren\'t specs","status":"passed"}');
handle('{"progress":0.8}');
handle('{"group":"Autotest::Rspec mappings","description":"should ignore untracked files (in @file)","status":"passed"}');
handle('{"progress":0.9}');
handle('{"group":"Autotest::Rspec consolidating failures","description":"should return no failures if no failures were given in the output","status":"passed"}');
handle('{"progress":1.0}');
handle('{"group":"Autotest::Rspec consolidating failures","description":"should return a hash with the spec filename =&gt; spec name for each failure or error","status":"passed"}');
handle('{"progress":1.0}');
handle('{"group":"Autotest::Rspec consolidating failures","description":"should not include the subject file","status":"passed"}');
handle('{"progress":1.1}');
handle('{"group":"Autotest::Rspec normalizing file names","description":"should ensure that a single file appears in files_to_test only once","status":"passed"}');
handle('{"progress":1.2}');
handle('{"group":"Spec::DSL::Main#describe","description":"should delegate to Spec::Example::ExampleGroupFactory.create_example_group","status":"passed"}');
handle('{"progress":1.3}');
handle('{"group":"Spec::DSL::Main#describe","description":"raises with no description","status":"passed"}');
handle('{"progress":1.3}');
handle('{"group":"Spec::DSL::Main#context","description":"should delegate to Spec::Example::ExampleGroupFactory.create_example_group","status":"passed"}');
handle('{"progress":1.4}');
handle('{"group":"Spec::DSL::Main#context","description":"raises with no description","status":"passed"}');
handle('{"progress":1.5}');
handle('{"group":"Spec::DSL::Main#share_examples_for","description":"should create a shared ExampleGroup","status":"passed"}');
handle('{"progress":1.5}');
handle('{"group":"Spec::DSL::Main#shared_examples_for","description":"should create a shared ExampleGroup","status":"passed"}');
handle('{"progress":1.6}');
handle('{"group":"Spec::DSL::Main#describe; with RUBY_VERSION = 1.9","description":"includes an enclosing module into the block\'s scope","status":"passed"}');
handle('{"progress":1.7}');
handle('{"group":"Spec::DSL::Main#share_as","description":"registers a shared ExampleGroup","status":"passed"}');
handle('{"progress":1.7}');
handle('{"group":"Spec::DSL::Main#share_as","description":"creates a constant that points to a Module","status":"passed"}');
handle('{"progress":1.8}');
handle('{"group":"Spec::DSL::Main#share_as","description":"complains if you pass it a not-constantizable name","status":"passed"}');
handle('{"progress":1.9}');
handle('{"group":"Spec::Example::ExampleGroupSubclass","description":"can access instance variables defined before(:each)","status":"passed"}');
handle('{"progress":1.9}');
handle('{"group":"Spec::Example::ExampleGroupSubclass","description":"can access class variables (Ruby 1.8 only)","status":"passed"}');
handle('{"progress":2.0}');
handle('{"group":"Spec::Example::ExampleGroupSubclass","description":"can access constants","status":"passed"}');
handle('{"progress":2.1}');
handle('{"group":"Spec::Example::ExampleGroupSubclass","description":"can access methods defined in the Example Group","status":"passed"}');
handle('{"progress":2.1}');
handle('{"group":"Spec::Example::ExampleGroupSubclass","description":"should run","status":"passed"}');
handle('{"progress":2.2}');
handle('{"group":"Spec::Example::ExampleGroupFactory#get","description":"should return the default ExampleGroup type for nil","status":"passed"}');
handle('{"progress":2.3}');
handle('{"group":"Spec::Example::ExampleGroupFactory#get","description":"should return the default ExampleGroup for an unregistered non-nil value","status":"passed"}');
handle('{"progress":2.4}');
handle('{"group":"Spec::Example::ExampleGroupFactory#get","description":"should return custom type if registered","status":"passed"}');
handle('{"progress":2.4}');
handle('{"group":"Spec::Example::ExampleGroupFactory#get","description":"should get the custom type after setting the default","status":"passed"}');
handle('{"progress":2.5}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should create a uniquely named class","status":"passed"}');
handle('{"progress":2.6}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should create a Spec::Example::Example subclass by default","status":"passed"}');
handle('{"progress":2.6}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should raise when no description is given","status":"passed"}');
handle('{"progress":2.7}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should raise when no block is given","status":"passed"}');
handle('{"progress":2.8}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should run registered ExampleGroups","status":"passed"}');
handle('{"progress":2.8}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should not run unregistered ExampleGroups","status":"passed"}');
handle('{"progress":2.9}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should create a type indicated by :location","status":"passed"}');
handle('{"progress":3.0}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should create a type indicated by :location (with location generated by caller on windows)","status":"passed"}');
handle('{"progress":3.0}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should create a type indicated by location for a path-like key","status":"passed"}');
handle('{"progress":3.1}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should use the longest key that matches when creating a type indicated by location","status":"passed"}');
handle('{"progress":3.2}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should favor the :type over the :location","status":"passed"}');
handle('{"progress":3.2}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should register ExampleGroup by default","status":"passed"}');
handle('{"progress":3.3}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group","description":"should enable unregistering of ExampleGroups","status":"passed"}');
handle('{"progress":3.4}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group with :type => :default","description":"should create a Spec::Example::ExampleGroup","status":"passed"}');
handle('{"progress":3.5}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group with :type => :something_other_than_default","description":"should create the specified type","status":"passed"}');
handle('{"progress":3.5}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_example_group with :shared => true","description":"should create and register a Spec::Example::SharedExampleGroup","status":"passed"}');
handle('{"progress":3.6}');
handle('{"group":"Spec::Example::ExampleGroupFactory#create_shared_example_group","description":"registers a new shared example group","status":"passed"}');
handle('{"progress":3.7}');
handle('{"group":"ExampleGroupMethods#describe when creating an ExampleGroup","description":"should create a subclass of the ExampleGroup when passed a block","status":"passed"}');
handle('{"progress":3.7}');
handle('{"group":"ExampleGroupMethods#describe when creating an ExampleGroup","description":"should not inherit examples","status":"passed"}');
handle('{"progress":3.8}');
handle('{"group":"ExampleGroupMethods#describe when creating an ExampleGroup","description":"records the spec path","status":"passed"}');
handle('{"progress":3.9}');
handle('{"group":"ExampleGroupMethods#describe when creating an example group with no description","description":"raises an ArgumentError","status":"passed"}');
handle('{"progress":3.9}');
handle('{"group":"ExampleGroupMethods#describe when creating a SharedExampleGroup","description":"should create a SharedExampleGroup","status":"passed"}');
handle('{"progress":4.0}');
handle('{"group":"ExampleGroupMethods#context when creating an ExampleGroup","description":"should create a subclass of the ExampleGroup when passed a block","status":"passed"}');
handle('{"progress":4.1}');
handle('{"group":"ExampleGroupMethods#context when creating an ExampleGroup","description":"should not inherit examples","status":"passed"}');
handle('{"progress":4.1}');
handle('{"group":"ExampleGroupMethods#context when creating an ExampleGroup","description":"records the spec path","status":"passed"}');
handle('{"progress":4.2}');
handle('{"group":"ExampleGroupMethods#context when creating an example group with no description","description":"raises an ArgumentError","status":"passed"}');
handle('{"progress":4.3}');
handle('{"group":"ExampleGroupMethods#context when creating a SharedExampleGroup","description":"should create a SharedExampleGroup","status":"passed"}');
handle('{"progress":4.3}');
handle('{"group":"ExampleGroupMethods#example","description":"should add an example","status":"passed"}');
handle('{"progress":4.4}');
handle('{"group":"ExampleGroupMethods#example with no location supplied creates an ExampleProxy","description":"with a description","status":"passed"}');
handle('{"progress":4.5}');
handle('{"group":"ExampleGroupMethods#example with no location supplied creates an ExampleProxy","description":"with options","status":"passed"}');
handle('{"progress":4.6}');
handle('{"group":"ExampleGroupMethods#example with no location supplied creates an ExampleProxy","description":"with a default backtrace (DEPRECATED)","status":"passed"}');
handle('{"progress":4.6}');
handle('{"group":"ExampleGroupMethods#example with no location supplied creates an ExampleProxy","description":"with a default location","status":"passed"}');
handle('{"progress":4.7}');
handle('{"group":"ExampleGroupMethods#example with a location supplied creates an ExampleProxy","description":"with the supplied location as #backtrace (DEPRECATED)","status":"passed"}');
handle('{"progress":4.8}');
handle('{"group":"ExampleGroupMethods#example with a location supplied creates an ExampleProxy","description":"with the supplied location as #location","status":"passed"}');
handle('{"progress":4.8}');
handle('{"group":"ExampleGroupMethods#specify","description":"should add an example","status":"passed"}');
handle('{"progress":4.9}');
handle('{"group":"ExampleGroupMethods#specify with no location supplied creates an ExampleProxy","description":"with a description","status":"passed"}');
handle('{"progress":5.0}');
handle('{"group":"ExampleGroupMethods#specify with no location supplied creates an ExampleProxy","description":"with options","status":"passed"}');
handle('{"progress":5.0}');
handle('{"group":"ExampleGroupMethods#specify with no location supplied creates an ExampleProxy","description":"with a default backtrace (DEPRECATED)","status":"passed"}');
handle('{"progress":5.1}');
handle('{"group":"ExampleGroupMethods#specify with no location supplied creates an ExampleProxy","description":"with a default location","status":"passed"}');
handle('{"progress":5.2}');
handle('{"group":"ExampleGroupMethods#specify with a location supplied creates an ExampleProxy","description":"with the supplied location as #backtrace (DEPRECATED)","status":"passed"}');
handle('{"progress":5.2}');
handle('{"group":"ExampleGroupMethods#specify with a location supplied creates an ExampleProxy","description":"with the supplied location as #location","status":"passed"}');
handle('{"progress":5.3}');
handle('{"group":"ExampleGroupMethods#it","description":"should add an example","status":"passed"}');
handle('{"progress":5.4}');
handle('{"group":"ExampleGroupMethods#it with no location supplied creates an ExampleProxy","description":"with a description","status":"passed"}');
handle('{"progress":5.4}');
handle('{"group":"ExampleGroupMethods#it with no location supplied creates an ExampleProxy","description":"with options","status":"passed"}');
handle('{"progress":5.5}');
handle('{"group":"ExampleGroupMethods#it with no location supplied creates an ExampleProxy","description":"with a default backtrace (DEPRECATED)","status":"passed"}');
handle('{"progress":5.6}');
handle('{"group":"ExampleGroupMethods#it with no location supplied creates an ExampleProxy","description":"with a default location","status":"passed"}');
handle('{"progress":5.7}');
handle('{"group":"ExampleGroupMethods#it with a location supplied creates an ExampleProxy","description":"with the supplied location as #backtrace (DEPRECATED)","status":"passed"}');
handle('{"progress":5.7}');
handle('{"group":"ExampleGroupMethods#it with a location supplied creates an ExampleProxy","description":"with the supplied location as #location","status":"passed"}');
handle('{"progress":5.8}');
handle('{"group":"ExampleGroupMethods#xexample","description":"should NOT create an example","status":"passed"}');
handle('{"progress":5.9}');
handle('{"group":"ExampleGroupMethods#xexample","description":"should warn that the example is disabled","status":"passed"}');
handle('{"progress":5.9}');
handle('{"group":"ExampleGroupMethods#xit","description":"should NOT create an example","status":"passed"}');
handle('{"progress":6.0}');
handle('{"group":"ExampleGroupMethods#xit","description":"should warn that the example is disabled","status":"passed"}');
handle('{"progress":6.1}');
handle('{"group":"ExampleGroupMethods#xspecify","description":"should NOT create an example","status":"passed"}');
handle('{"progress":6.1}');
handle('{"group":"ExampleGroupMethods#xspecify","description":"should warn that the example is disabled","status":"passed"}');
handle('{"progress":6.2}');
handle('{"group":"ExampleGroupMethods#examples","description":"should have Examples","status":"passed"}');
handle('{"progress":6.3}');
handle('{"group":"ExampleGroupMethods#examples","description":"should not include methods that begin with test (only when TU interop is loaded)","status":"passed"}');
handle('{"progress":6.3}');
handle('{"group":"ExampleGroupMethods#examples","description":"should include methods that begin with should and has an arity of 0 in suite","status":"passed"}');
handle('{"progress":6.4}');
handle('{"group":"ExampleGroupMethods#examples","description":"should not include methods that begin with test_ and has an arity &gt; 0 in suite","status":"passed"}');
handle('{"progress":6.5}');
handle('{"group":"ExampleGroupMethods#examples","description":"should not include methods that begin with should_ and has an arity &gt; 0 in suite","status":"passed"}');
handle('{"progress":6.5}');
handle('{"group":"ExampleGroupMethods#examples","description":"should run should_methods","status":"passed"}');
handle('{"progress":6.6}');
handle('{"group":"ExampleGroupMethods#set_description given a String","description":".description should return the String passed into .set_description","status":"passed"}');
handle('{"progress":6.7}');
handle('{"group":"ExampleGroupMethods#set_description given a String","description":".described_type should provide nil as its type","status":"passed"}');
handle('{"progress":6.7}');
handle('{"group":"ExampleGroupMethods#set_description given a Class","description":".description should return a String representation of that type (fully qualified) as its name","status":"passed"}');
handle('{"progress":6.8}');
handle('{"group":"ExampleGroupMethods#set_description given a Class","description":".described_type should return the passed in type","status":"passed"}');
handle('{"progress":6.9}');
handle('{"group":"ExampleGroupMethods#set_description given a String and a Class","description":".description should return String then space then Type","status":"passed"}');
handle('{"progress":7.0}');
handle('{"group":"ExampleGroupMethods#set_description given a String and a Class","description":".described_type should return the passed in type","status":"passed"}');
handle('{"progress":7.0}');
handle('{"group":"ExampleGroupMethods#set_description given a Class and a String (starting with an alpha char)","description":".description should return the Type then space then String","status":"passed"}');
handle('{"progress":7.1}');
handle('{"group":"ExampleGroupMethods#set_description given a Class and a String (starting with a \'.\')","description":".description should return the Type then String","status":"passed"}');
handle('{"progress":7.2}');
handle('{"group":"ExampleGroupMethods#set_description#set_description(Class, String starting with #)","description":"should return the Class then String","status":"passed"}');
handle('{"progress":7.2}');
handle('{"group":"ExampleGroupMethods#set_description#set_description(Class, String containing .)","description":".description should return the Type then space then String","status":"passed"}');
handle('{"progress":7.3}');
handle('{"group":"ExampleGroupMethods#set_description#set_description(Class, String containing #)","description":".description should return the Type then space then String","status":"passed"}');
handle('{"progress":7.4}');
handle('{"group":"ExampleGroupMethods#set_description#set_description(String, Type, String)","description":".description should return the first String then space then Type then second String","status":"passed"}');
handle('{"progress":7.4}');
handle('{"group":"ExampleGroupMethods#set_description#set_description(Hash representing options)","description":".location should expand the passed in :location option passed into the constructor","status":"passed"}');
handle('{"progress":7.5}');
handle('{"group":"ExampleGroupMethods#set_description#set_description(Hash representing options)","description":".options should return all the options passed in","status":"passed"}');
handle('{"progress":7.6}');
handle('{"group":"ExampleGroupMethods#description","description":"should return the same description instance for each call","status":"passed"}');
handle('{"progress":7.6}');
handle('{"group":"ExampleGroupMethods#description","description":"should not add a space when description begins with #","status":"passed"}');
handle('{"progress":7.7}');
handle('{"group":"ExampleGroupMethods#description","description":"should not add a space when description begins with .","status":"passed"}');
handle('{"progress":7.8}');
handle('{"group":"ExampleGroupMethods#description","description":"should return the class name if nil","status":"passed"}');
handle('{"progress":7.8}');
handle('{"group":"ExampleGroupMethods#description","description":"should return the class name if nil","status":"passed"}');
handle('{"progress":7.9}');
handle('{"group":"ExampleGroupMethods#description","description":"is cached","status":"passed"}');
handle('{"progress":8.0}');
handle('{"group":"ExampleGroupMethods#description_parts","description":"should return an Array of the current class description args","status":"passed"}');
handle('{"progress":8.1}');
handle('{"group":"ExampleGroupMethods#description_parts","description":"should return an Array of the description args from each class in the hierarchy","status":"passed"}');
handle('{"progress":8.1}');
handle('{"group":"ExampleGroupMethods#description_parts","description":"caches the description parts","status":"passed"}');
handle('{"progress":8.2}');
handle('{"group":"ExampleGroupMethods#described_type","description":"should return passed in type","status":"passed"}');
handle('{"progress":8.3}');
handle('{"group":"ExampleGroupMethods#described_type","description":"should return #described_type of superclass when no passed in type","status":"passed"}');
handle('{"progress":8.3}');
handle('{"group":"ExampleGroupMethods#described_type","description":"is cached per example group","status":"passed"}');
handle('{"progress":8.4}');
handle('{"group":"ExampleGroupMethods#include","description":"should have accessible class methods from included module","status":"passed"}');
handle('{"progress":8.5}');
handle('{"group":"ExampleGroupMethods#number_of_examples","description":"should count number of examples","status":"passed"}');
handle('{"progress":8.5}');
handle('{"group":"ExampleGroupMethods#class_eval","description":"should allow constants to be defined","status":"passed"}');
handle('{"progress":8.6}');
handle('{"group":"ExampleGroupMethods#register","description":"should add ExampleGroup to set of ExampleGroups to be run","status":"passed"}');
handle('{"progress":8.7}');
handle('{"group":"ExampleGroupMethods#remove_example_group","description":"should remove ExampleGroup from set of ExampleGroups to be run","status":"passed"}');
handle('{"progress":8.7}');
handle('{"group":"ExampleGroupMethods#run given an example group with at least one example","description":"should call add_example_group","status":"passed"}');
handle('{"progress":8.8}');
handle('{"group":"ExampleGroupMethods#run given an example group with no examples","description":"should NOT call add_example_group","status":"passed"}');
handle('{"progress":8.9}');
handle('{"group":"ExampleGroupMethods#matcher_class=","description":"should call new and matches? on the class used for matching examples","status":"passed"}');
handle('{"progress":8.9}');
handle('{"group":"ExampleGroupMethods#options","description":"should expose the options hash","status":"passed"}');
handle('{"progress":9.0}');
handle('{"group":"ExampleGroupMethods#before","description":"stores before(:each) blocks","status":"passed"}');
handle('{"progress":9.1}');
handle('{"group":"ExampleGroupMethods#before","description":"stores before(:all) blocks","status":"passed"}');
handle('{"progress":9.2}');
handle('{"group":"ExampleGroupMethods#before","description":"stores before(:suite) blocks","status":"passed"}');
handle('{"progress":9.2}');
handle('{"group":"ExampleGroupMethods#after","description":"stores after(:each) blocks","status":"passed"}');
handle('{"progress":9.3}');
handle('{"group":"ExampleGroupMethods#after","description":"stores after(:all) blocks","status":"passed"}');
handle('{"progress":9.4}');
handle('{"group":"ExampleGroupMethods#after","description":"stores after(:suite) blocks","status":"passed"}');
handle('{"progress":9.4}');
handle('{"group":"ExampleGroupMethods#run_before_all","description":"does not create an instance if before_all_parts are empty","status":"passed"}');
handle('{"progress":9.5}');
handle('{"group":"ExampleGroupMethods#run_after_all","description":"does not create an instance if after_all_parts are empty","status":"passed"}');
handle('{"progress":9.6}');
handle('{"group":"ExampleGroupMethods#examples_to_run","description":"runs only the example identified by a line number","status":"passed"}');
handle('{"progress":9.6}');
handle('{"group":"ExampleGroupMethods#examples_to_run","description":"runs the example identified by a line number even if it\'s not the example line number","status":"passed"}');
handle('{"progress":9.7}');
handle('{"group":"ExampleGroupMethods#examples_to_run","description":"runs all the examples in the group ","status":"passed"}');
handle('{"progress":9.8}');
handle('{"group":"ExampleGroupMethods#examples_to_run","description":"doesn\'t run any examples in another group","status":"passed"}');
handle('{"progress":9.8}');
handle('{"group":"ExampleGroupMethods#define","description":"generates an instance method","status":"passed"}');
handle('{"progress":9.9}');
handle('{"group":"ExampleGroupMethods#define","description":"caches the value","status":"passed"}');
handle('{"progress":10.0}');
handle('{"group":"Spec::Example::ExampleGroupProxy#description","description":"provides the example group\'s description","status":"passed"}');
handle('{"progress":10.0}');
handle('{"group":"Spec::Example::ExampleGroupProxy#nested_descriptions","description":"provides the example group\'s nested_descriptions","status":"passed"}');
handle('{"progress":10.1}');
handle('{"group":"Spec::Example::ExampleGroupProxy#filtered_description (DEPRECATED)","description":"is deprecated","status":"passed"}');
handle('{"progress":10.2}');
handle('{"group":"Spec::Example::ExampleGroupProxy#filtered_description (DEPRECATED)","description":"builds the description from the group\'s nested_descriptions","status":"passed"}');
handle('{"progress":10.3}');
handle('{"group":"Spec::Example::ExampleGroupProxy#filtered_description (DEPRECATED)","description":"filters out description parts that match the supplied regexp","status":"passed"}');
handle('{"progress":10.3}');
handle('{"group":"Spec::Example::ExampleGroupProxy#examples","description":"provides a collection of example group proxies","status":"passed"}');
handle('{"progress":10.4}');
handle('{"group":"Spec::Example::ExampleGroupProxy#backtrace (deprecated - use #location)","description":"provides the location of the declaration of this group","status":"passed"}');
handle('{"progress":10.5}');
handle('{"group":"Spec::Example::ExampleGroupProxy#backtrace (deprecated - use #location)","description":"warns deprecation","status":"passed"}');
handle('{"progress":10.5}');
handle('{"group":"Spec::Example::ExampleGroupProxy#location","description":"provides the location of the declaration of this group","status":"passed"}');
handle('{"progress":10.6}');
handle('{"group":"Spec::Example::ExampleGroupProxy#options","description":"provides the options passed to the example group declaration","status":"passed"}');
handle('{"progress":10.7}');
handle('{"group":"Spec::Example::ExampleGroupProxy#options","description":"excludes :location","status":"passed"}');
handle('{"progress":10.7}');
handle('{"group":"Spec::Example::ExampleGroupProxy#options","description":"excludes :scope","status":"passed"}');
handle('{"progress":10.8}');
handle('{"group":"Spec::Example::ExampleGroupProxy#options","description":"preserves the original hash","status":"passed"}');
handle('{"progress":10.9}');
handle('{"group":"Spec::Example::ExampleGroup via a class definition","description":"should understand module scoping","status":"passed"}');
handle('{"progress":10.9}');
handle('{"group":"Spec::Example::ExampleGroup via a class definition","description":"can access class variables in examples in Ruby 1.8","status":"passed"}');
handle('{"progress":11.0}');
handle('{"group":"Spec::Example::ExampleGroup via a class definition","description":"can NOT access class variables in examples in Ruby 1.9","status":"passed"}');
handle('{"progress":11.1}');
handle('{"group":"Spec::Example::ExampleGroup via a class definition without a class variable","description":"should not retain class variables from other Example classes","status":"passed"}');
handle('{"progress":11.1}');
handle('{"group":"Spec::Example::ExampleGroup#pending","description":"should raise a Pending error when its block fails","status":"passed"}');
handle('{"progress":11.2}');
handle('{"group":"Spec::Example::ExampleGroup#pending","description":"should raise Spec::Example::PendingExampleFixedError when its block does not fail","status":"passed"}');
handle('{"progress":11.3}');
handle('{"group":"Spec::Example::ExampleGroup#run","description":"should not run when there are no examples","status":"passed"}');
handle('{"progress":11.4}');
handle('{"group":"Spec::Example::ExampleGroup#run","description":"should report the start of an example run","status":"passed"}');
handle('{"progress":11.4}');
handle('{"group":"Spec::Example::ExampleGroup#run","description":"should report the end of an example run","status":"passed"}');
handle('{"progress":11.5}');
handle('{"group":"Spec::Example::ExampleGroup#run when before_each fails","description":"should not run example block","status":"passed"}');
handle('{"progress":11.6}');
handle('{"group":"Spec::Example::ExampleGroup#run when before_each fails","description":"should run after_each","status":"passed"}');
handle('{"progress":11.6}');
handle('{"group":"Spec::Example::ExampleGroup#run when before_each fails","description":"should report failure location when in before_each","status":"passed"}');
handle('{"progress":11.7}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run on dry run","description":"should not run before(:all) or after(:all)","status":"passed"}');
handle('{"progress":11.8}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run on dry run","description":"should not run example","status":"passed"}');
handle('{"progress":11.8}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with specified examples when specified_examples matches entire ExampleGroup","description":"should not run the Examples in the ExampleGroup","status":"passed"}');
handle('{"progress":11.9}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with specified examples Spec::Example::ExampleGroup#run when specified_examples matches only Example description","description":"should not run the example","status":"passed"}');
handle('{"progress":12.0}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with specified examples Spec::Example::ExampleGroup#run when specified_examples does not match an Example description","description":"should not run the example","status":"passed"}');
handle('{"progress":12.0}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with specified examples Spec::Example::ExampleGroup#run when specified_examples matches an Example description","description":"should run only the example","status":"passed"}');
handle('{"progress":12.1}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should send reporter example_group_started","status":"passed"}');
handle('{"progress":12.2}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should run example on run","status":"passed"}');
handle('{"progress":12.2}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should run before(:all) block only once","status":"passed"}');
handle('{"progress":12.3}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should run after(:all) block only once","status":"passed"}');
handle('{"progress":12.4}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"after(:all) should have access to all instance variables defined in before(:all)","status":"passed"}');
handle('{"progress":12.5}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should copy instance variables from before(:all)\'s execution context into spec\'s execution context","status":"passed"}');
handle('{"progress":12.5}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should not add global before callbacks for untargetted example_group","status":"passed"}');
handle('{"progress":12.6}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should add global before callbacks for targetted example_groups","status":"passed"}');
handle('{"progress":12.7}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should order before callbacks from global to local","status":"passed"}');
handle('{"progress":12.7}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should order after callbacks from local to global","status":"passed"}');
handle('{"progress":12.8}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should have accessible instance methods from included module","status":"passed"}');
handle('{"progress":12.9}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with success","description":"should include targetted modules included using configuration","status":"passed"}');
handle('{"progress":12.9}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with pending example that has a failing assertion","description":"should send example_pending to formatter","status":"passed"}');
handle('{"progress":13.0}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with pending example that does not have a failing assertion","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":13.1}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run with pending example that does not have a failing assertion","description":"should send example_pending to formatter","status":"passed"}');
handle('{"progress":13.1}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:all) fails","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":13.2}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:all) fails","description":"should not run any example","status":"passed"}');
handle('{"progress":13.3}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:all) fails","description":"should run ExampleGroup after(:all)","status":"passed"}');
handle('{"progress":13.3}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:all) fails","description":"should run example_group after(:all)","status":"passed"}');
handle('{"progress":13.4}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:all) fails","description":"should supply before(:all) as description","status":"passed"}');
handle('{"progress":13.5}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:each) fails","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":13.5}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when before(:each) fails","description":"should run after(:all)","status":"passed"}');
handle('{"progress":13.6}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when any example fails","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":13.7}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when any example fails","description":"should run after(:all)","status":"passed"}');
handle('{"progress":13.8}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when first after(:each) block fails","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":13.8}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when first after(:each) block fails","description":"should run second after(:each) block","status":"passed"}');
handle('{"progress":13.9}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when first before(:each) block fails","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":14.0}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when first before(:each) block fails","description":"should not run second before(:each)","status":"passed"}');
handle('{"progress":14.0}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when failure in after(:all)","description":"should add an example failure to the TestResult","status":"passed"}');
handle('{"progress":14.1}');
handle('{"group":"Spec::Example::ExampleGroup#run Spec::Example::ExampleGroup#run when failure in after(:all)","description":"should return false","status":"passed"}');
handle('{"progress":14.2}');
handle('{"group":"Spec::Example::ExampleGroup subclasses","description":"should have access to the described_type","status":"passed"}');
handle('{"progress":14.2}');
handle('{"group":"Spec::Example::ExampleGroup subclasses","description":"should concat descriptions when nested","status":"passed"}');
handle('{"progress":14.3}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should match correct example_group and example","status":"passed"}');
handle('{"progress":14.4}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should not match wrong example","status":"passed"}');
handle('{"progress":14.4}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should not match wrong example_group","status":"passed"}');
handle('{"progress":14.5}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should match example only","status":"passed"}');
handle('{"progress":14.6}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should match example_group only","status":"passed"}');
handle('{"progress":14.6}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should match example_group ending with before(:all)","status":"passed"}');
handle('{"progress":14.7}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should escape regexp chars","status":"passed"}');
handle('{"progress":14.8}');
handle('{"group":"Spec::Example::ExampleMatcher#matches?","description":"should match when example_group is modularized","status":"passed"}');
handle('{"progress":14.9}');
handle('{"group":"Spec::Example::ExampleMatcher#matches? normal case","description":"matches when passed in example matches","status":"passed"}');
handle('{"progress":14.9}');
handle('{"group":"Spec::Example::ExampleMatcher#matches? normal case","description":"does not match when no passed in examples match","status":"passed"}');
handle('{"progress":15.0}');
handle('{"group":"Spec::Example::ExampleMatcher#matches? where description has \'::\' in it","description":"matches when passed in example matches","status":"passed"}');
handle('{"progress":15.1}');
handle('{"group":"Spec::Example::ExampleMatcher#matches? where description has \'::\' in it","description":"does not match when no passed in examples match","status":"passed"}');
handle('{"progress":15.1}');
handle('{"group":"Spec::Example::ExampleMatcher called with nil example","description":"does not puke","status":"passed"}');
handle('{"progress":15.2}');
handle('{"group":"Spec::Example::ExampleMethods with an included module that is reopened","description":"should have reopened methods","status":"passed"}');
handle('{"progress":15.3}');
handle('{"group":"Spec::Example::ExampleMethods#should in an ExampleGroup with an implicit subject","description":"delegates matcher to the implied subject","status":"passed"}');
handle('{"progress":15.3}');
handle('{"group":"Spec::Example::ExampleMethods#should in an ExampleGroup using an explicit subject","description":"delegates matcher to the declared subject","status":"passed"}');
handle('{"progress":15.4}');
handle('{"group":"Spec::Example::ExampleMethods#should in an ExampleGroup using \'self\' as an explicit subject","description":"delegates matcher to the ExampleGroup","status":"passed"}');
handle('{"progress":15.5}');
handle('{"group":"Spec::Example::ExampleMethods#should_not in an ExampleGroup with an implicit subject","description":"delegates matcher to the implied subject","status":"passed"}');
handle('{"progress":15.5}');
handle('{"group":"Spec::Example::ExampleMethods#should_not in an ExampleGroup using an explicit subject","description":"delegates matcher to the declared subject","status":"passed"}');
handle('{"progress":15.6}');
handle('{"group":"Spec::Example::ExampleMethods#should_not in an ExampleGroup using \'self\' as an explicit subject","description":"delegates matcher to the ExampleGroup","status":"passed"}');
handle('{"progress":15.7}');
handle('{"group":"#options","description":"should expose the options hash","status":"passed"}');
handle('{"progress":15.7}');
handle('{"group":"#set_instance_variables_from_hash","description":"preserves the options","status":"passed"}');
handle('{"progress":15.8}');
handle('{"group":"#description","description":"returns the supplied description","status":"passed"}');
handle('{"progress":15.9}');
handle('{"group":"#description","description":"returns the generated description if there is no description supplied","status":"passed"}');
handle('{"progress":16.0}');
handle('{"group":"#description","description":"warns if there is no supplied or generated description","status":"passed"}');
handle('{"progress":16.0}');
handle('{"group":"#expect","description":"aliases #should with #to on the proc","status":"passed"}');
handle('{"progress":16.1}');
handle('{"group":"#expect","description":"aliases #should_not with #to_not on the proc","status":"passed"}');
handle('{"progress":16.2}');
handle('{"group":"Spec::Example::ExampleProxy#description","description":"provides the submitted description","status":"passed"}');
handle('{"progress":16.2}');
handle('{"group":"Spec::Example::ExampleProxy#update","description":"updates the description","status":"passed"}');
handle('{"progress":16.3}');
handle('{"group":"Spec::Example::ExampleProxy#options","description":"provides the submitted options","status":"passed"}');
handle('{"progress":16.4}');
handle('{"group":"Spec::Example::ExampleProxy#backtrace (DEPRECATED - use #location)","description":"is deprecated","status":"passed"}');
handle('{"progress":16.4}');
handle('{"group":"Spec::Example::ExampleProxy#backtrace (DEPRECATED - use #location)","description":"provides the location of the declaration of this group","status":"passed"}');
handle('{"progress":16.5}');
handle('{"group":"Spec::Example::ExampleProxy#location","description":"provides the location of the declaration of this group","status":"passed"}');
handle('{"progress":16.6}');
handle('{"group":"a helper method","description":"is available to examples in the same group","status":"passed"}');
handle('{"progress":16.6}');
handle('{"group":"a helper method from a nested group","description":"is available to examples in a nested group","status":"passed"}');
handle('{"progress":16.7}');
handle('{"group":"Nested Example Groups","description":"should run before(:all), before(:each), example, after(:each), after(:all) in order","status":"passed"}');
handle('{"progress":16.8}');
handle('{"group":"Nested Example Groups nested example group","description":"should run all before and after callbacks","status":"passed"}');
handle('{"progress":16.8}');
handle('{"group":"Nested Example Groups description options","description":"includes :location","status":"passed"}');
handle('{"progress":16.9}');
handle('{"group":"Nested Example Groups description options","description":"includes any other options","status":"passed"}');
handle('{"progress":17.0}');
handle('{"group":"Spec::Example::Pending when no block is supplied","description":"raises an ExamplePendingError if no block is supplied","status":"passed"}');
handle('{"progress":17.1}');
handle('{"group":"Spec::Example::Pending when the supplied block fails","description":"raises an ExamplePendingError if a supplied block fails as expected","status":"passed"}');
handle('{"progress":17.1}');
handle('{"group":"Spec::Example::Pending when the supplied block fails with a mock","description":"raises an ExamplePendingError if a supplied block fails as expected with a mock","status":"passed"}');
handle('{"progress":17.2}');
handle('{"group":"Spec::Example::Pending when the supplied block passes","description":"raises a PendingExampleFixedError","status":"passed"}');
handle('{"progress":17.3}');
handle('{"group":"Spec::Example::ExamplePendingError","description":"should have the message provided","status":"passed"}');
handle('{"progress":17.3}');
handle('{"group":"Spec::Example::NotYetImplementedError","description":"should have the message \'Not Yet Implemented\'","status":"passed"}');
handle('{"progress":17.4}');
handle('{"group":"predicate_matcher[method_on_object] = matcher_method","description":"is deprecated","status":"passed"}');
handle('{"progress":17.5}');
handle('{"group":"predicate_matcher[method_on_object] = matcher_method","description":"should match matcher_method if method_on_object returns true","status":"passed"}');
handle('{"progress":17.5}');
handle('{"group":"predicate_matcher[method_on_object] = matcher_method","description":"should not match matcher_method if method_on_object returns false","status":"passed"}');
handle('{"progress":17.6}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"complains when adding a second shared example_group with the same description","status":"passed"}');
handle('{"progress":17.7}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"does NOT add the same group twice","status":"passed"}');
handle('{"progress":17.7}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"does NOT complain when adding the same shared example_group again (i.e. file gets reloaded)","status":"passed"}');
handle('{"progress":17.8}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"does NOT complain when adding the same shared example_group in same file with different absolute path","status":"passed"}');
handle('{"progress":17.9}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"complains when adding a different shared example_group with the same name in a different file with the same basename","status":"passed"}');
handle('{"progress":17.9}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"adds examples to current example_group using it_should_behave_like","status":"passed"}');
handle('{"progress":18.0}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"adds examples to from two shared groups","status":"passed"}');
handle('{"progress":18.1}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"adds examples to current example_group using include","status":"passed"}');
handle('{"progress":18.2}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"adds examples to current example_group using it_should_behave_like with a module","status":"passed"}');
handle('{"progress":18.2}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"runs shared examples","status":"passed"}');
handle('{"progress":18.3}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"runs before(:each) and after(:each) from shared example_group","status":"passed"}');
handle('{"progress":18.4}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"should run before(:all) and after(:all) only once from shared example_group","status":"passed"}');
handle('{"progress":18.4}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"should include modules, included into shared example_group, into current example_group","status":"passed"}');
handle('{"progress":18.5}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"should make methods defined in the shared example_group available in consuming example_group","status":"passed"}');
handle('{"progress":18.6}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true","description":"should raise when named shared example_group can not be found","status":"passed"}');
handle('{"progress":18.6}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true#register","description":"creates a new shared example group with the submitted args","status":"passed"}');
handle('{"progress":18.7}');
handle('{"group":"Spec::Example::ExampleGroup with :shared => true#register","description":"registers the shared example group","status":"passed"}');
handle('{"progress":18.8}');
handle('{"group":"Grandparent ExampleGroup Parent ExampleGroup","description":"should bar","status":"passed"}');
handle('{"progress":18.8}');
handle('{"group":"Grandparent ExampleGroup Parent ExampleGroup Child ExampleGroup","description":"should bam","status":"passed"}');
handle('{"progress":18.9}');
handle('{"group":"implicit subject with a class","description":"returns an instance of the class","status":"passed"}');
handle('{"progress":19.0}');
handle('{"group":"implicit subject with a Module","description":"returns the Module","status":"passed"}');
handle('{"progress":19.0}');
handle('{"group":"implicit subject with a string","description":"return the string","status":"passed"}');
handle('{"progress":19.1}');
handle('{"group":"implicit subject with a number","description":"returns the number","status":"passed"}');
handle('{"progress":19.2}');
handle('{"group":"explicit subject defined in a top level group","description":"replaces the implicit subject in that group","status":"passed"}');
handle('{"progress":19.2}');
handle('{"group":"explicit subject defined in a top level group","description":"is available in a nested group (subclass)","status":"passed"}');
handle('{"progress":19.3}');
handle('{"group":"explicit subject defined in a top level group","description":"is available in a doubly nested group (subclass)","status":"passed"}');
handle('{"progress":19.4}');
handle('{"group":".its (to access subject\'s attributes)","description":"passes when expectation should pass","status":"passed"}');
handle('{"progress":19.5}');
handle('{"group":".its (to access subject\'s attributes)","description":"fails when expectation should fail","status":"passed"}');
handle('{"progress":19.5}');
handle('{"group":"Diff","description":"should output unified diff of two strings","status":"passed"}');
handle('{"progress":19.6}');
handle('{"group":"Diff","description":"should output unified diff message of two arrays","status":"passed"}');
handle('{"progress":19.7}');
handle('{"group":"Diff","description":"should output a friendly message if comparing simple hashes","status":"passed"}');
handle('{"progress":19.7}');
handle('{"group":"Diff","description":"should output a friendly message if comparing simple hashes that contain different keys","status":"passed"}');
handle('{"progress":19.8}');
handle('{"group":"Diff","description":"should output diff message if the hash is complex (containing Array or Hash)","status":"passed"}');
handle('{"progress":19.9}');
handle('{"group":"Diff","description":"should output unified diff message of two objects","status":"passed"}');
handle('{"progress":19.9}');
handle('{"group":"Diff in context format","description":"should output unified diff message of two objects","status":"passed"}');
handle('{"progress":20.0}');
handle('{"group":"Object#should","description":"accepts and interacts with a matcher","status":"passed"}');
handle('{"progress":20.1}');
handle('{"group":"Object#should","description":"asks for a failure_message_for_should when matches? returns false","status":"passed"}');
handle('{"progress":20.1}');
handle('{"group":"Object#should_not","description":"accepts and interacts with a matcher","status":"passed"}');
handle('{"progress":20.2}');
handle('{"group":"Object#should_not","description":"asks for a failure_message_for_should_not when matches? returns true","status":"passed"}');
handle('{"progress":20.3}');
handle('{"group":"Spec::Expectations#fail_with with no diff","description":"should handle just a message","status":"passed"}');
handle('{"progress":20.3}');
handle('{"group":"Spec::Expectations#fail_with with Array","description":"is deprecated","status":"passed"}');
handle('{"progress":20.4}');
handle('{"group":"Spec::Expectations#fail_with with diff","description":"should not call differ if no expected/actual","status":"passed"}');
handle('{"progress":20.5}');
handle('{"group":"Spec::Expectations#fail_with with diff","description":"should call differ if expected/actual are presented separately","status":"passed"}');
handle('{"progress":20.6}');
handle('{"group":"Spec::Expectations#fail_with with diff","description":"should call differ if expected/actual are not strings","status":"passed"}');
handle('{"progress":20.6}');
handle('{"group":"Spec::Expectations#fail_with with diff","description":"should call differ if expected/actual are both hashes","status":"passed"}');
handle('{"progress":20.7}');
handle('{"group":"Spec::Expectations#fail_with with diff","description":"should not call differ if expected or actual are procs","status":"passed"}');
handle('{"progress":20.8}');
handle('{"group":"Spec::Expectations#fail_with with a nil message","description":"should handle just a message","status":"passed"}');
handle('{"progress":20.8}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler#handle_matcher","description":"asks the matcher if it matches","status":"passed"}');
handle('{"progress":20.9}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler#handle_matcher","description":"returns the match value","status":"passed"}');
handle('{"progress":21.0}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler#handle_matcher","description":"calls failure_message_for_should if the matcher implements it","status":"passed"}');
handle('{"progress":21.0}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler#handle_matcher","description":"calls fail if matcher.diffable?","status":"passed"}');
handle('{"progress":21.1}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler#handle_matcher","description":"calls failure_message if the matcher does not implement failure_message_for_should","status":"passed"}');
handle('{"progress":21.2}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler#handle_matcher","description":"appends the :or message in the options hash passed to should","status":"passed"}');
handle('{"progress":21.2}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"asks the matcher if it doesn\'t match when the matcher responds to #does_not_match?","status":"passed"}');
handle('{"progress":21.3}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"asks the matcher if it matches when the matcher doesn\'t respond to #does_not_match?","status":"passed"}');
handle('{"progress":21.4}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"returns the match value","status":"passed"}');
handle('{"progress":21.4}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"calls failure_message_for_should_not if the matcher implements it","status":"passed"}');
handle('{"progress":21.5}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"calls negative_failure_message if the matcher does not implement failure_message_for_should_not","status":"passed"}');
handle('{"progress":21.6}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"calls fail if matcher.diffable?","status":"passed"}');
handle('{"progress":21.7}');
handle('{"group":"Spec::Expectations::NegativeExpectationHandler#handle_matcher","description":"appends the :or message in the options hash passed to should","status":"passed"}');
handle('{"progress":21.7}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler","description":"should handle submitted args","status":"passed"}');
handle('{"progress":21.8}');
handle('{"group":"Spec::Expectations::PositiveExpectationHandler","description":"should handle the submitted block","status":"passed"}');
handle('{"progress":21.9}');
handle('{"group":"wrap_expectation","description":"should return true if there is no error","status":"passed"}');
handle('{"progress":21.9}');
handle('{"group":"wrap_expectation","description":"should return false if there is an error","status":"passed"}');
handle('{"progress":22.0}');
handle('{"group":"ExampleGroup with test/unit/interop with passing examples","description":"should output 0 failures","status":"passed"}');
handle('{"progress":22.1}');
handle('{"group":"ExampleGroup with test/unit/interop with passing examples","description":"should return an exit code of 0","status":"passed"}');
handle('{"progress":22.1}');
handle('{"group":"ExampleGroup with test/unit/interop with failing examples","description":"should output 1 failure","status":"passed"}');
handle('{"progress":22.2}');
handle('{"group":"ExampleGroup with test/unit/interop with failing examples","description":"should return an exit code of 256","status":"passed"}');
handle('{"progress":22.3}');
handle('{"group":"ExampleGroup with test/unit/interop with example that raises an error","description":"should output 1 failure","status":"passed"}');
handle('{"progress":22.3}');
handle('{"group":"ExampleGroup with test/unit/interop with example that raises an error","description":"should return an exit code of 256","status":"passed"}');
handle('{"progress":22.4}');
handle('{"group":"ExampleGroup with test/unit/interop options hash","description":"should be exposed","status":"passed"}');
handle('{"progress":22.5}');
handle('{"group":"Test::Unit::TestCase","description":"should find all Test::Unit test methods","status":"passed"}');
handle('{"progress":22.5}');
handle('{"group":"Test::Unit::TestCase with passing test case","description":"should output 0 failures","status":"passed"}');
handle('{"progress":22.6}');
handle('{"group":"Test::Unit::TestCase with passing test case","description":"should return an exit code of 0","status":"passed"}');
handle('{"progress":22.7}');
handle('{"group":"Test::Unit::TestCase with failing test case","description":"should output 1 failure","status":"passed"}');
handle('{"progress":22.8}');
handle('{"group":"Test::Unit::TestCase with failing test case","description":"should return an exit code of 256","status":"passed"}');
handle('{"progress":22.8}');
handle('{"group":"Test::Unit::TestCase with test case that raises an error","description":"should output 1 failure","status":"passed"}');
handle('{"progress":22.9}');
handle('{"group":"Test::Unit::TestCase with test case that raises an error","description":"should return an exit code of 256","status":"passed"}');
handle('{"progress":23.0}');
handle('{"group":"TestSuiteAdapter","description":"should pass","status":"passed"}');
handle('{"progress":23.0}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"matches when actual == expected","status":"passed"}');
handle('{"progress":23.1}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"matches when actual &lt; (expected + delta)","status":"passed"}');
handle('{"progress":23.2}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"matches when actual &gt; (expected - delta)","status":"passed"}');
handle('{"progress":23.2}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"does not match when actual == (expected - delta)","status":"passed"}');
handle('{"progress":23.3}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"does not match when actual &lt; (expected - delta)","status":"passed"}');
handle('{"progress":23.4}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"does not match when actual == (expected + delta)","status":"passed"}');
handle('{"progress":23.4}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"does not match when actual &gt; (expected + delta)","status":"passed"}');
handle('{"progress":23.5}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"provides a failure message for should","status":"passed"}');
handle('{"progress":23.6}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"provides a failure message for should tno","status":"passed"}');
handle('{"progress":23.6}');
handle('{"group":"[actual.should] be_close(expected, delta)","description":"provides a description","status":"passed"}');
handle('{"progress":23.7}');
handle('{"group":"actual.should be_an_instance_of(expected)","description":"passes if actual is instance of expected class","status":"passed"}');
handle('{"progress":23.8}');
handle('{"group":"actual.should be_an_instance_of(expected)","description":"fails if actual is instance of subclass of expected class","status":"passed"}');
handle('{"progress":23.9}');
handle('{"group":"actual.should be_an_instance_of(expected)","description":"fails with failure message for should unless actual is instance of expected class","status":"passed"}');
handle('{"progress":23.9}');
handle('{"group":"actual.should be_an_instance_of(expected)","description":"provides a description","status":"passed"}');
handle('{"progress":24.0}');
handle('{"group":"actual.should_not be_an_instance_of(expected)","description":"fails with failure message for should_not if actual is instance of expected class","status":"passed"}');
handle('{"progress":24.1}');
handle('{"group":"actual.should be_instance_of(expected)","description":"passes if actual is instance of expected class","status":"passed"}');
handle('{"progress":24.1}');
handle('{"group":"actual.should be_instance_of(expected)","description":"fails if actual is instance of subclass of expected class","status":"passed"}');
handle('{"progress":24.2}');
handle('{"group":"actual.should be_instance_of(expected)","description":"fails with failure message for should unless actual is instance of expected class","status":"passed"}');
handle('{"progress":24.3}');
handle('{"group":"actual.should be_instance_of(expected)","description":"provides a description","status":"passed"}');
handle('{"progress":24.3}');
handle('{"group":"actual.should_not be_instance_of(expected)","description":"fails with failure message for should_not if actual is instance of expected class","status":"passed"}');
handle('{"progress":24.4}');
handle('{"group":"actual.should be_a_kind_of(expected)","description":"passes if actual is instance of expected class","status":"passed"}');
handle('{"progress":24.5}');
handle('{"group":"actual.should be_a_kind_of(expected)","description":"passes if actual is instance of subclass of expected class","status":"passed"}');
handle('{"progress":24.5}');
handle('{"group":"actual.should be_a_kind_of(expected)","description":"fails with failure message for should unless actual is kind of expected class","status":"passed"}');
handle('{"progress":24.6}');
handle('{"group":"actual.should be_a_kind_of(expected)","description":"provides a description","status":"passed"}');
handle('{"progress":24.7}');
handle('{"group":"actual.should_not be_a_kind_of(expected)","description":"fails with failure message for should_not if actual is kind of expected class","status":"passed"}');
handle('{"progress":24.7}');
handle('{"group":"actual.should be_kind_of(expected)","description":"passes if actual is instance of expected class","status":"passed"}');
handle('{"progress":24.8}');
handle('{"group":"actual.should be_kind_of(expected)","description":"passes if actual is instance of subclass of expected class","status":"passed"}');
handle('{"progress":24.9}');
handle('{"group":"actual.should be_kind_of(expected)","description":"fails with failure message for should unless actual is kind of expected class","status":"passed"}');
handle('{"progress":25.0}');
handle('{"group":"actual.should be_kind_of(expected)","description":"provides a description","status":"passed"}');
handle('{"progress":25.0}');
handle('{"group":"actual.should_not be_kind_of(expected)","description":"fails with failure message for should_not if actual is kind of expected class","status":"passed"}');
handle('{"progress":25.1}');
handle('{"group":"should be_predicate","description":"should pass when actual returns true for :predicate?","status":"passed"}');
handle('{"progress":25.2}');
handle('{"group":"should be_predicate","description":"should pass when actual returns true for :predicates? (present tense)","status":"passed"}');
handle('{"progress":25.2}');
handle('{"group":"should be_predicate","description":"should fail when actual returns false for :predicate?","status":"passed"}');
handle('{"progress":25.3}');
handle('{"group":"should be_predicate","description":"should fail when actual returns false for :predicate?","status":"passed"}');
handle('{"progress":25.4}');
handle('{"group":"should be_predicate","description":"should fail when actual does not respond to :predicate?","status":"passed"}');
handle('{"progress":25.4}');
handle('{"group":"should be_predicate","description":"should fail on error other than NameError","status":"passed"}');
handle('{"progress":25.5}');
handle('{"group":"should be_predicate","description":"should fail on error other than NameError (with the present tense predicate)","status":"passed"}');
handle('{"progress":25.6}');
handle('{"group":"should_not be_predicate","description":"should pass when actual returns false for :sym?","status":"passed"}');
handle('{"progress":25.6}');
handle('{"group":"should_not be_predicate","description":"should pass when actual returns nil for :sym?","status":"passed"}');
handle('{"progress":25.7}');
handle('{"group":"should_not be_predicate","description":"should fail when actual returns true for :sym?","status":"passed"}');
handle('{"progress":25.8}');
handle('{"group":"should_not be_predicate","description":"should fail when actual does not respond to :sym?","status":"passed"}');
handle('{"progress":25.8}');
handle('{"group":"should be_predicate(*args)","description":"should pass when actual returns true for :predicate?(*args)","status":"passed"}');
handle('{"progress":25.9}');
handle('{"group":"should be_predicate(*args)","description":"should fail when actual returns false for :predicate?(*args)","status":"passed"}');
handle('{"progress":26.0}');
handle('{"group":"should be_predicate(*args)","description":"should fail when actual does not respond to :predicate?","status":"passed"}');
handle('{"progress":26.0}');
handle('{"group":"should_not be_predicate(*args)","description":"should pass when actual returns false for :predicate?(*args)","status":"passed"}');
handle('{"progress":26.1}');
handle('{"group":"should_not be_predicate(*args)","description":"should fail when actual returns true for :predicate?(*args)","status":"passed"}');
handle('{"progress":26.2}');
handle('{"group":"should_not be_predicate(*args)","description":"should fail when actual does not respond to :predicate?","status":"passed"}');
handle('{"progress":26.3}');
handle('{"group":"should be_true","description":"should pass when actual equal(true)","status":"passed"}');
handle('{"progress":26.3}');
handle('{"group":"should be_true","description":"should fail when actual equal(false)","status":"passed"}');
handle('{"progress":26.4}');
handle('{"group":"should be_false","description":"should pass when actual equal(false)","status":"passed"}');
handle('{"progress":26.5}');
handle('{"group":"should be_false","description":"should fail when actual equal(true)","status":"passed"}');
handle('{"progress":26.5}');
handle('{"group":"should be_nil","description":"should pass when actual is nil","status":"passed"}');
handle('{"progress":26.6}');
handle('{"group":"should be_nil","description":"should fail when actual is not nil","status":"passed"}');
handle('{"progress":26.7}');
handle('{"group":"should_not be_nil","description":"should pass when actual is not nil","status":"passed"}');
handle('{"progress":26.7}');
handle('{"group":"should_not be_nil","description":"should fail when actual is nil","status":"passed"}');
handle('{"progress":26.8}');
handle('{"group":"should be <","description":"should pass when &lt; operator returns true","status":"passed"}');
handle('{"progress":26.9}');
handle('{"group":"should be <","description":"should fail when &lt; operator returns false","status":"passed"}');
handle('{"progress":26.9}');
handle('{"group":"should be <=","description":"should pass when &lt;= operator returns true","status":"passed"}');
handle('{"progress":27.0}');
handle('{"group":"should be <=","description":"should fail when &lt;= operator returns false","status":"passed"}');
handle('{"progress":27.1}');
handle('{"group":"should be >=","description":"should pass when &gt;= operator returns true","status":"passed"}');
handle('{"progress":27.1}');
handle('{"group":"should be >=","description":"should fail when &gt;= operator returns false","status":"passed"}');
handle('{"progress":27.2}');
handle('{"group":"should be >","description":"should pass when &gt; operator returns true","status":"passed"}');
handle('{"progress":27.3}');
handle('{"group":"should be >","description":"should fail when &gt; operator returns false","status":"passed"}');
handle('{"progress":27.4}');
handle('{"group":"should be ==","description":"should pass when == operator returns true","status":"passed"}');
handle('{"progress":27.4}');
handle('{"group":"should be ==","description":"should fail when == operator returns false","status":"passed"}');
handle('{"progress":27.5}');
handle('{"group":"should be ===","description":"should pass when === operator returns true","status":"passed"}');
handle('{"progress":27.6}');
handle('{"group":"should be ===","description":"should fail when === operator returns false","status":"passed"}');
handle('{"progress":27.6}');
handle('{"group":"should_not with operators","description":"should coach user to stop using operators with should_not","status":"passed"}');
handle('{"progress":27.7}');
handle('{"group":"should be","description":"should pass if actual is true or a set value","status":"passed"}');
handle('{"progress":27.8}');
handle('{"group":"should be","description":"should fail if actual is false","status":"passed"}');
handle('{"progress":27.8}');
handle('{"group":"should be","description":"should fail if actual is nil","status":"passed"}');
handle('{"progress":27.9}');
handle('{"group":"should be(value)","description":"should pass if actual.equal?(value)","status":"passed"}');
handle('{"progress":28.0}');
handle('{"group":"should be(value)","description":"should fail if !actual.equal?(value)","status":"passed"}');
handle('{"progress":28.0}');
handle('{"group":"\'should be\' with operator","description":"should include \'be\' in the description","status":"passed"}');
handle('{"progress":28.1}');
handle('{"group":"arbitrary predicate with DelegateClass","description":"should access methods defined in the delegating class (LH[#48])","status":"passed"}');
handle('{"progress":28.2}');
handle('{"group":"be_a, be_an","description":"should pass when class matches","status":"passed"}');
handle('{"progress":28.2}');
handle('{"group":"be_a, be_an","description":"should fail when class does not match","status":"passed"}');
handle('{"progress":28.3}');
handle('{"group":"be_an_instance_of","description":"passes when direct class matches","status":"passed"}');
handle('{"progress":28.4}');
handle('{"group":"be_an_instance_of","description":"fails when class is higher up hierarchy","status":"passed"}');
handle('{"progress":28.5}');
handle('{"group":"should change(actual, message)","description":"should pass when actual is modified by the block","status":"passed"}');
handle('{"progress":28.5}');
handle('{"group":"should change(actual, message)","description":"should fail when actual is not modified by the block","status":"passed"}');
handle('{"progress":28.6}');
handle('{"group":"should change(actual, message)","description":"provides a #description","status":"passed"}');
handle('{"progress":28.7}');
handle('{"group":"should_not change(actual, message)","description":"should pass when actual is not modified by the block","status":"passed"}');
handle('{"progress":28.7}');
handle('{"group":"should_not change(actual, message)","description":"should fail when actual is not modified by the block","status":"passed"}');
handle('{"progress":28.8}');
handle('{"group":"should change { block }","description":"should pass when actual is modified by the block","status":"passed"}');
handle('{"progress":28.9}');
handle('{"group":"should change { block }","description":"should fail when actual is not modified by the block","status":"passed"}');
handle('{"progress":28.9}');
handle('{"group":"should change { block }","description":"should warn if passed a block using do/end instead of {}","status":"passed"}');
handle('{"progress":29.0}');
handle('{"group":"should change { block }","description":"provides a #description","status":"passed"}');
handle('{"progress":29.1}');
handle('{"group":"should_not change { block }","description":"should pass when actual is modified by the block","status":"passed"}');
handle('{"progress":29.1}');
handle('{"group":"should_not change { block }","description":"should fail when actual is not modified by the block","status":"passed"}');
handle('{"progress":29.2}');
handle('{"group":"should_not change { block }","description":"should warn if passed a block using do/end instead of {}","status":"passed"}');
handle('{"progress":29.3}');
handle('{"group":"should change(actual, message).by(expected)","description":"should pass when attribute is changed by expected amount","status":"passed"}');
handle('{"progress":29.3}');
handle('{"group":"should change(actual, message).by(expected)","description":"should fail when the attribute is changed by unexpected amount","status":"passed"}');
handle('{"progress":29.4}');
handle('{"group":"should change(actual, message).by(expected)","description":"should fail when the attribute is changed by unexpected amount in the opposite direction","status":"passed"}');
handle('{"progress":29.5}');
handle('{"group":"should change{ block }.by(expected)","description":"should pass when attribute is changed by expected amount","status":"passed"}');
handle('{"progress":29.6}');
handle('{"group":"should change{ block }.by(expected)","description":"should fail when the attribute is changed by unexpected amount","status":"passed"}');
handle('{"progress":29.6}');
handle('{"group":"should change{ block }.by(expected)","description":"should fail when the attribute is changed by unexpected amount in the opposite direction","status":"passed"}');
handle('{"progress":29.7}');
handle('{"group":"should change(actual, message).by_at_least(expected)","description":"should pass when attribute is changed by greater than the expected amount","status":"passed"}');
handle('{"progress":29.8}');
handle('{"group":"should change(actual, message).by_at_least(expected)","description":"should pass when attribute is changed by the expected amount","status":"passed"}');
handle('{"progress":29.8}');
handle('{"group":"should change(actual, message).by_at_least(expected)","description":"should fail when the attribute is changed by less than the expected amount","status":"passed"}');
handle('{"progress":29.9}');
handle('{"group":"should change{ block }.by_at_least(expected)","description":"should pass when attribute is changed by greater than expected amount","status":"passed"}');
handle('{"progress":30.0}');
handle('{"group":"should change{ block }.by_at_least(expected)","description":"should pass when attribute is changed by the expected amount","status":"passed"}');
handle('{"progress":30.0}');
handle('{"group":"should change{ block }.by_at_least(expected)","description":"should fail when the attribute is changed by less than the unexpected amount","status":"passed"}');
handle('{"progress":30.1}');
handle('{"group":"should change(actual, message).by_at_most(expected)","description":"should pass when attribute is changed by less than the expected amount","status":"passed"}');
handle('{"progress":30.2}');
handle('{"group":"should change(actual, message).by_at_most(expected)","description":"should pass when attribute is changed by the expected amount","status":"passed"}');
handle('{"progress":30.2}');
handle('{"group":"should change(actual, message).by_at_most(expected)","description":"should fail when the attribute is changed by greater than the expected amount","status":"passed"}');
handle('{"progress":30.3}');
handle('{"group":"should change{ block }.by_at_most(expected)","description":"should pass when attribute is changed by less than expected amount","status":"passed"}');
handle('{"progress":30.4}');
handle('{"group":"should change{ block }.by_at_most(expected)","description":"should pass when attribute is changed by the expected amount","status":"passed"}');
handle('{"progress":30.4}');
handle('{"group":"should change{ block }.by_at_most(expected)","description":"should fail when the attribute is changed by greater than the unexpected amount","status":"passed"}');
handle('{"progress":30.5}');
handle('{"group":"should change(actual, message).from(old)","description":"should pass when attribute is == to expected value before executing block","status":"passed"}');
handle('{"progress":30.6}');
handle('{"group":"should change(actual, message).from(old)","description":"should fail when attribute is not == to expected value before executing block","status":"passed"}');
handle('{"progress":30.7}');
handle('{"group":"should change{ block }.from(old)","description":"should pass when attribute is == to expected value before executing block","status":"passed"}');
handle('{"progress":30.7}');
handle('{"group":"should change{ block }.from(old)","description":"should fail when attribute is not == to expected value before executing block","status":"passed"}');
handle('{"progress":30.8}');
handle('{"group":"should change(actual, message).to(new)","description":"should pass when attribute is == to expected value after executing block","status":"passed"}');
handle('{"progress":30.9}');
handle('{"group":"should change(actual, message).to(new)","description":"should fail when attribute is not == to expected value after executing block","status":"passed"}');
handle('{"progress":30.9}');
handle('{"group":"should change{ block }.to(new)","description":"should pass when attribute is == to expected value after executing block","status":"passed"}');
handle('{"progress":31.0}');
handle('{"group":"should change{ block }.to(new)","description":"should fail when attribute is not == to expected value after executing block","status":"passed"}');
handle('{"progress":31.1}');
handle('{"group":"should change(actual, message).from(old).to(new)","description":"should pass when #to comes before #from","status":"passed"}');
handle('{"progress":31.1}');
handle('{"group":"should change(actual, message).from(old).to(new)","description":"should pass when #from comes before #to","status":"passed"}');
handle('{"progress":31.2}');
handle('{"group":"should change(actual, message).from(old).to(new)","description":"should show the correct messaging when #after and #to are different","status":"passed"}');
handle('{"progress":31.3}');
handle('{"group":"should change(actual, message).from(old).to(new)","description":"should show the correct messaging when #before and #from are different","status":"passed"}');
handle('{"progress":31.3}');
handle('{"group":"should change{ block }.from(old).to(new)","description":"should pass when #to comes before #from","status":"passed"}');
handle('{"progress":31.4}');
handle('{"group":"should change{ block }.from(old).to(new)","description":"should pass when #from comes before #to","status":"passed"}');
handle('{"progress":31.5}');
handle('{"group":"Spec::Matchers::Change","description":"should work when the receiver has implemented #send","status":"passed"}');
handle('{"progress":31.5}');
handle('{"group":"Spec::Matchers::Be called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":31.6}');
handle('{"group":"Spec::Matchers::Be called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":31.7}');
handle('{"group":"Spec::Matchers::Be called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":31.7}');
handle('{"group":"Spec::Matchers::Be called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":31.8}');
handle('{"group":"Spec::Matchers::Change called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":31.9}');
handle('{"group":"Spec::Matchers::Change called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":32.0}');
handle('{"group":"Spec::Matchers::Change called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":32.0}');
handle('{"group":"Spec::Matchers::Change called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":32.1}');
handle('{"group":"Spec::Matchers::Has called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":32.2}');
handle('{"group":"Spec::Matchers::Has called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":32.2}');
handle('{"group":"Spec::Matchers::Has called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":32.3}');
handle('{"group":"Spec::Matchers::Has called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":32.4}');
handle('{"group":"Spec::Matchers::Have called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":32.4}');
handle('{"group":"Spec::Matchers::Have called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":32.5}');
handle('{"group":"Spec::Matchers::Have called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":32.6}');
handle('{"group":"Spec::Matchers::Have called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":32.6}');
handle('{"group":"Spec::Matchers::MatchArray called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":32.7}');
handle('{"group":"Spec::Matchers::MatchArray called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":32.8}');
handle('{"group":"Spec::Matchers::MatchArray called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":32.8}');
handle('{"group":"Spec::Matchers::MatchArray called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":32.9}');
handle('{"group":"Spec::Matchers::Matcher called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":33.0}');
handle('{"group":"Spec::Matchers::Matcher called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":33.1}');
handle('{"group":"Spec::Matchers::Matcher called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":33.1}');
handle('{"group":"Spec::Matchers::Matcher called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":33.2}');
handle('{"group":"Spec::Matchers::RaiseError called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":33.3}');
handle('{"group":"Spec::Matchers::RaiseError called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":33.3}');
handle('{"group":"Spec::Matchers::RaiseError called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":33.4}');
handle('{"group":"Spec::Matchers::RaiseError called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":33.5}');
handle('{"group":"Spec::Matchers::RespondTo called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":33.5}');
handle('{"group":"Spec::Matchers::RespondTo called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":33.6}');
handle('{"group":"Spec::Matchers::RespondTo called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":33.7}');
handle('{"group":"Spec::Matchers::RespondTo called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":33.7}');
handle('{"group":"Spec::Matchers::Satisfy called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":33.8}');
handle('{"group":"Spec::Matchers::Satisfy called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":33.9}');
handle('{"group":"Spec::Matchers::Satisfy called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":33.9}');
handle('{"group":"Spec::Matchers::Satisfy called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":34.0}');
handle('{"group":"Spec::Matchers::SimpleMatcher called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":34.1}');
handle('{"group":"Spec::Matchers::SimpleMatcher called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":34.2}');
handle('{"group":"Spec::Matchers::SimpleMatcher called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":34.2}');
handle('{"group":"Spec::Matchers::SimpleMatcher called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":34.3}');
handle('{"group":"Spec::Matchers::ThrowSymbol called with should","description":"should have public instance method &quot;failure_message_for_should&quot;","status":"passed"}');
handle('{"progress":34.4}');
handle('{"group":"Spec::Matchers::ThrowSymbol called with should","description":"should have public instance method &quot;failure_message&quot;","status":"passed"}');
handle('{"progress":34.4}');
handle('{"group":"Spec::Matchers::ThrowSymbol called with should not","description":"should have public instance method &quot;failure_message_for_should_not&quot;","status":"passed"}');
handle('{"progress":34.5}');
handle('{"group":"Spec::Matchers::ThrowSymbol called with should not","description":"should have public instance method &quot;negative_failure_message&quot;","status":"passed"}');
handle('{"progress":34.6}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should == expected","status":"passed"}');
handle('{"progress":34.6}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should not == expected","status":"passed"}');
handle('{"progress":34.7}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should be empty (arbitrary predicate)","status":"passed"}');
handle('{"progress":34.8}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should not be empty (arbitrary predicate)","status":"passed"}');
handle('{"progress":34.8}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should be true","status":"passed"}');
handle('{"progress":34.9}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should be false","status":"passed"}');
handle('{"progress":35.0}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should be nil","status":"passed"}');
handle('{"progress":35.0}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should be &gt; n","status":"passed"}');
handle('{"progress":35.1}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should be predicate arg1, arg2 and arg3","status":"passed"}');
handle('{"progress":35.2}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should equal","status":"passed"}');
handle('{"progress":35.3}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should_not equal","status":"passed"}');
handle('{"progress":35.3}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should eql","status":"passed"}');
handle('{"progress":35.4}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should not eql","status":"passed"}');
handle('{"progress":35.5}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should have_key","status":"passed"}');
handle('{"progress":35.5}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should have n items","status":"passed"}');
handle('{"progress":35.6}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should have at least n items","status":"passed"}');
handle('{"progress":35.7}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should have at most n items","status":"passed"}');
handle('{"progress":35.7}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should include","status":"passed"}');
handle('{"progress":35.8}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"array.should =~ [1,2,3]","status":"passed"}');
handle('{"progress":35.9}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should match","status":"passed"}');
handle('{"progress":35.9}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should raise_error","status":"passed"}');
handle('{"progress":36.0}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should raise_error with type","status":"passed"}');
handle('{"progress":36.1}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should raise_error with type and message","status":"passed"}');
handle('{"progress":36.1}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should respond_to","status":"passed"}');
handle('{"progress":36.2}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should throw symbol","status":"passed"}');
handle('{"progress":36.3}');
handle('{"group":"Matchers should be able to generate their own descriptions","description":"should throw symbol (with named symbol)","status":"passed"}');
handle('{"progress":36.4}');
handle('{"group":"a Matcher with no description","description":"should provide a helpful message when used in a string-less example block","status":"passed"}');
handle('{"progress":36.4}');
handle('{"group":"#create","description":"is deprecated","status":"passed"}');
handle('{"progress":36.5}');
handle('{"group":"#define","description":"creates a method that initializes a new matcher with the submitted name and expected arg","status":"passed"}');
handle('{"progress":36.6}');
handle('{"group":"eql","description":"should match when actual.eql?(expected)","status":"passed"}');
handle('{"progress":36.6}');
handle('{"group":"eql","description":"should not match when !actual.eql?(expected)","status":"passed"}');
handle('{"progress":36.7}');
handle('{"group":"eql","description":"should describe itself","status":"passed"}');
handle('{"progress":36.8}');
handle('{"group":"eql","description":"should provide message, expected and actual on #failure_message","status":"passed"}');
handle('{"progress":36.8}');
handle('{"group":"eql","description":"should provide message, expected and actual on #negative_failure_message","status":"passed"}');
handle('{"progress":36.9}');
handle('{"group":"equal","description":"should match when actual.equal?(expected)","status":"passed"}');
handle('{"progress":37.0}');
handle('{"group":"equal","description":"should not match when !actual.equal?(expected)","status":"passed"}');
handle('{"progress":37.0}');
handle('{"group":"equal","description":"should describe itself","status":"passed"}');
handle('{"progress":37.1}');
handle('{"group":"equal","description":"should provide message on #failure_message","status":"passed"}');
handle('{"progress":37.2}');
handle('{"group":"equal","description":"should provide message on #negative_failure_message","status":"passed"}');
handle('{"progress":37.2}');
handle('{"group":"should exist within an example group","description":"passes if target exists","status":"passed"}');
handle('{"progress":37.3}');
handle('{"group":"should exist within an example group","description":"passes if target exists with args","status":"passed"}');
handle('{"progress":37.4}');
handle('{"group":"should exist within an example group","description":"fails if target does not exist","status":"passed"}');
handle('{"progress":37.5}');
handle('{"group":"should exist within an example group","description":"describes itself","status":"passed"}');
handle('{"progress":37.5}');
handle('{"group":"should exist within an example group","description":"passes should_not exist if target doesn\'t exist","status":"passed"}');
handle('{"progress":37.6}');
handle('{"group":"should exist outside of an example group","description":"should pass if target exists","status":"passed"}');
handle('{"progress":37.7}');
handle('{"group":"should have_sym(*args)","description":"should pass if #has_sym?(*args) returns true","status":"passed"}');
handle('{"progress":37.7}');
handle('{"group":"should have_sym(*args)","description":"should fail if #has_sym?(*args) returns false","status":"passed"}');
handle('{"progress":37.8}');
handle('{"group":"should have_sym(*args)","description":"should fail if #has_sym?(*args) returns nil","status":"passed"}');
handle('{"progress":37.9}');
handle('{"group":"should have_sym(*args)","description":"should fail if target does not respond to #has_sym?","status":"passed"}');
handle('{"progress":37.9}');
handle('{"group":"should have_sym(*args)","description":"should reraise an exception thrown in #has_sym?(*args)","status":"passed"}');
handle('{"progress":38.0}');
handle('{"group":"should_not have_sym(*args)","description":"should pass if #has_sym?(*args) returns false","status":"passed"}');
handle('{"progress":38.1}');
handle('{"group":"should_not have_sym(*args)","description":"should pass if #has_sym?(*args) returns nil","status":"passed"}');
handle('{"progress":38.1}');
handle('{"group":"should_not have_sym(*args)","description":"should fail if #has_sym?(*args) returns true","status":"passed"}');
handle('{"progress":38.2}');
handle('{"group":"should_not have_sym(*args)","description":"should fail if target does not respond to #has_sym?","status":"passed"}');
handle('{"progress":38.3}');
handle('{"group":"should_not have_sym(*args)","description":"should reraise an exception thrown in #has_sym?(*args)","status":"passed"}');
handle('{"progress":38.3}');
handle('{"group":"has","description":"should work when the target implements #send","status":"passed"}');
handle('{"progress":38.4}');
handle('{"group":"should have(n).items","description":"should pass if target has a collection of items with n members","status":"passed"}');
handle('{"progress":38.5}');
handle('{"group":"should have(n).items","description":"should convert :no to 0","status":"passed"}');
handle('{"progress":38.5}');
handle('{"group":"should have(n).items","description":"should fail if target has a collection of items with &lt; n members","status":"passed"}');
handle('{"progress":38.6}');
handle('{"group":"should have(n).items","description":"should fail if target has a collection of items with &gt; n members","status":"passed"}');
handle('{"progress":38.7}');
handle('{"group":"should have(1).item when ActiveSupport::Inflector is defined","description":"should pluralize the collection name","status":"passed"}');
handle('{"progress":38.8}');
handle('{"group":"should have(1).item when Inflector is defined","description":"should pluralize the collection name","status":"passed"}');
handle('{"progress":38.8}');
handle('{"group":"should have(n).items where result responds to items but returns something other than a collection","description":"should provide a meaningful error","status":"passed"}');
handle('{"progress":38.9}');
handle('{"group":"should_not have(n).items","description":"should pass if target has a collection of items with &lt; n members","status":"passed"}');
handle('{"progress":39.0}');
handle('{"group":"should_not have(n).items","description":"should pass if target has a collection of items with &gt; n members","status":"passed"}');
handle('{"progress":39.0}');
handle('{"group":"should_not have(n).items","description":"should fail if target has a collection of items with n members","status":"passed"}');
handle('{"progress":39.1}');
handle('{"group":"should have_exactly(n).items","description":"should pass if target has a collection of items with n members","status":"passed"}');
handle('{"progress":39.2}');
handle('{"group":"should have_exactly(n).items","description":"should convert :no to 0","status":"passed"}');
handle('{"progress":39.2}');
handle('{"group":"should have_exactly(n).items","description":"should fail if target has a collection of items with &lt; n members","status":"passed"}');
handle('{"progress":39.3}');
handle('{"group":"should have_exactly(n).items","description":"should fail if target has a collection of items with &gt; n members","status":"passed"}');
handle('{"progress":39.4}');
handle('{"group":"should have_at_least(n).items","description":"should pass if target has a collection of items with n members","status":"passed"}');
handle('{"progress":39.4}');
handle('{"group":"should have_at_least(n).items","description":"should pass if target has a collection of items with &gt; n members","status":"passed"}');
handle('{"progress":39.5}');
handle('{"group":"should have_at_least(n).items","description":"should fail if target has a collection of items with &lt; n members","status":"passed"}');
handle('{"progress":39.6}');
handle('{"group":"should have_at_least(n).items","description":"should provide educational negative failure messages","status":"passed"}');
handle('{"progress":39.6}');
handle('{"group":"should have_at_most(n).items","description":"should pass if target has a collection of items with n members","status":"passed"}');
handle('{"progress":39.7}');
handle('{"group":"should have_at_most(n).items","description":"should fail if target has a collection of items with &gt; n members","status":"passed"}');
handle('{"progress":39.8}');
handle('{"group":"should have_at_most(n).items","description":"should pass if target has a collection of items with &lt; n members","status":"passed"}');
handle('{"progress":39.9}');
handle('{"group":"should have_at_most(n).items","description":"should provide educational negative failure messages","status":"passed"}');
handle('{"progress":39.9}');
handle('{"group":"have(n).items(args, block)","description":"should pass args to target","status":"passed"}');
handle('{"progress":40.0}');
handle('{"group":"have(n).items(args, block)","description":"should pass block to target","status":"passed"}');
handle('{"progress":40.1}');
handle('{"group":"have(n).items where target IS a collection","description":"should reference the number of items IN the collection","status":"passed"}');
handle('{"progress":40.1}');
handle('{"group":"have(n).items where target IS a collection","description":"should fail when the number of items IN the collection is not as expected","status":"passed"}');
handle('{"progress":40.2}');
handle('{"group":"have(n).characters where target IS a String","description":"should pass if the length is correct","status":"passed"}');
handle('{"progress":40.3}');
handle('{"group":"have(n).characters where target IS a String","description":"should fail if the length is incorrect","status":"passed"}');
handle('{"progress":40.3}');
handle('{"group":"have(n).things on an object which is not a collection nor contains one","description":"should fail","status":"passed"}');
handle('{"progress":40.4}');
handle('{"group":"Spec::Matchers::Have for a collection owner that implements #send","description":"should work in the straightforward case","status":"passed"}');
handle('{"progress":40.5}');
handle('{"group":"Spec::Matchers::Have for a collection owner that implements #send","description":"should work when doing automatic pluralization","status":"passed"}');
handle('{"progress":40.5}');
handle('{"group":"Spec::Matchers::Have for a collection owner that implements #send","description":"should blow up when the owner doesn\'t respond to that method","status":"passed"}');
handle('{"progress":40.6}');
handle('{"group":"Spec::Matchers::Have","description":"should have method_missing as private","status":"passed"}');
handle('{"progress":40.7}');
handle('{"group":"Spec::Matchers::Have","description":"should not respond_to? method_missing (because it\'s private)","status":"passed"}');
handle('{"progress":40.7}');
handle('{"group":"Spec::Matchers::Have respond_to?","description":"should be true for a method which Have defines","status":"passed"}');
handle('{"progress":40.8}');
handle('{"group":"Spec::Matchers::Have respond_to?","description":"should be true for a method that it\'s superclass (Object) defines","status":"passed"}');
handle('{"progress":40.9}');
handle('{"group":"Spec::Matchers::Have respond_to?","description":"should be false for a method which neither Object nor nor Have defines","status":"passed"}');
handle('{"progress":41.0}');
handle('{"group":"Spec::Matchers::Have respond_to?","description":"should be false if the owner doesn\'t respond to the method","status":"passed"}');
handle('{"progress":41.0}');
handle('{"group":"Spec::Matchers::Have respond_to?","description":"should be true if the owner responds to the method","status":"passed"}');
handle('{"progress":41.1}');
handle('{"group":"should include(expected)","description":"should pass if target includes expected","status":"passed"}');
handle('{"progress":41.2}');
handle('{"group":"should include(expected)","description":"should pass if target is a Hash and has the expected as a key","status":"passed"}');
handle('{"progress":41.2}');
handle('{"group":"should include(expected)","description":"should fail if target does not include expected","status":"passed"}');
handle('{"progress":41.3}');
handle('{"group":"should include(with, multiple, args)","description":"should pass if target includes all items","status":"passed"}');
handle('{"progress":41.4}');
handle('{"group":"should include(with, multiple, args)","description":"should pass if target is a Hash including all items as keys","status":"passed"}');
handle('{"progress":41.4}');
handle('{"group":"should include(with, multiple, args)","description":"should fail if target does not include any one of the items","status":"passed"}');
handle('{"progress":41.5}');
handle('{"group":"should include(with, multiple, args)","description":"should pass if target is a Hash missing any item as a key","status":"passed"}');
handle('{"progress":41.6}');
handle('{"group":"should_not include(expected)","description":"should pass if target does not include expected","status":"passed"}');
handle('{"progress":41.6}');
handle('{"group":"should_not include(expected)","description":"should pass if target is a Hash and does not have the expected as a key","status":"passed"}');
handle('{"progress":41.7}');
handle('{"group":"should_not include(expected)","description":"should fail if target includes expected","status":"passed"}');
handle('{"progress":41.8}');
handle('{"group":"should include(:key => value)","description":"should pass if target is a Hash and includes the key/value pair","status":"passed"}');
handle('{"progress":41.8}');
handle('{"group":"should include(:key => value)","description":"should pass if target is a Hash and includes the key/value pair among others","status":"passed"}');
handle('{"progress":41.9}');
handle('{"group":"should include(:key => value)","description":"should fail if target is a Hash and has a different value for key","status":"passed"}');
handle('{"progress":42.0}');
handle('{"group":"should include(:key => value)","description":"should fail if target is a Hash and has a different key","status":"passed"}');
handle('{"progress":42.1}');
handle('{"group":"array.should =~ other_array","description":"should pass if target contains all items","status":"passed"}');
handle('{"progress":42.1}');
handle('{"group":"array.should =~ other_array","description":"should pass if target contains all items out of order","status":"passed"}');
handle('{"progress":42.2}');
handle('{"group":"array.should =~ other_array","description":"should fail if target includes extra items","status":"passed"}');
handle('{"progress":42.3}');
handle('{"group":"array.should =~ other_array","description":"should fail if target is missing items","status":"passed"}');
handle('{"progress":42.3}');
handle('{"group":"array.should =~ other_array","description":"should fail if target is missing items and has extra items","status":"passed"}');
handle('{"progress":42.4}');
handle('{"group":"array.should =~ other_array","description":"should sort items in the error message if they all respond to &lt;=&gt;","status":"passed"}');
handle('{"progress":42.5}');
handle('{"group":"array.should =~ other_array","description":"should not sort items in the error message if they don\'t all respond to &lt;=&gt;","status":"passed"}');
handle('{"progress":42.5}');
handle('{"group":"array.should =~ other_array","description":"should accurately report extra elements when there are duplicates","status":"passed"}');
handle('{"progress":42.6}');
handle('{"group":"array.should =~ other_array","description":"should accurately report missing elements when there are duplicates","status":"passed"}');
handle('{"progress":42.7}');
handle('{"group":"should_not =~ [:with, :multiple, :args]","description":"should not be supported","status":"passed"}');
handle('{"progress":42.7}');
handle('{"group":"should match(expected)","description":"should pass when target (String) matches expected (Regexp)","status":"passed"}');
handle('{"progress":42.8}');
handle('{"group":"should match(expected)","description":"should pass when target (String) matches expected (String)","status":"passed"}');
handle('{"progress":42.9}');
handle('{"group":"should match(expected)","description":"should fail when target (String) does not match expected (Regexp)","status":"passed"}');
handle('{"progress":42.9}');
handle('{"group":"should match(expected)","description":"should fail when target (String) does not match expected (String)","status":"passed"}');
handle('{"progress":43.0}');
handle('{"group":"should match(expected)","description":"should provide message, expected and actual on failure","status":"passed"}');
handle('{"progress":43.1}');
handle('{"group":"should_not match(expected)","description":"should pass when target (String) matches does not match (Regexp)","status":"passed"}');
handle('{"progress":43.2}');
handle('{"group":"should_not match(expected)","description":"should pass when target (String) matches does not match (String)","status":"passed"}');
handle('{"progress":43.2}');
handle('{"group":"should_not match(expected)","description":"should fail when target (String) matches expected (Regexp)","status":"passed"}');
handle('{"progress":43.3}');
handle('{"group":"should_not match(expected)","description":"should fail when target (String) matches expected (String)","status":"passed"}');
handle('{"progress":43.4}');
handle('{"group":"should_not match(expected)","description":"should provide message, expected and actual on failure","status":"passed"}');
handle('{"progress":43.4}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"be_true","status":"passed"}');
handle('{"progress":43.5}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"be_false","status":"passed"}');
handle('{"progress":43.6}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"be_nil","status":"passed"}');
handle('{"progress":43.6}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"be_arbitrary_predicate","status":"passed"}');
handle('{"progress":43.7}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"change","status":"passed"}');
handle('{"progress":43.8}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"have","status":"passed"}');
handle('{"progress":43.8}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"have_exactly","status":"passed"}');
handle('{"progress":43.9}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"have_at_least","status":"passed"}');
handle('{"progress":44.0}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"have_at_most","status":"passed"}');
handle('{"progress":44.0}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"raise_error","status":"passed"}');
handle('{"progress":44.1}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"satisfy","status":"passed"}');
handle('{"progress":44.2}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"throw_symbol","status":"passed"}');
handle('{"progress":44.2}');
handle('{"group":"The Spec::Matchers module gets included in the execution context of every spec.\nThis module should provide the following methods, each of which returns a Matcher object.","description":"respond_to","status":"passed"}');
handle('{"progress":44.3}');
handle('{"group":"Spec::Matchers#method_missing","description":"should convert be_xyz to Be(:be_xyz)","status":"passed"}');
handle('{"progress":44.4}');
handle('{"group":"Spec::Matchers#method_missing","description":"should convert have_xyz to Has(:have_xyz)","status":"passed"}');
handle('{"progress":44.5}');
handle('{"group":"Spec::Matchers::Matcher","description":"is not diffable by default","status":"passed"}');
handle('{"progress":44.5}');
handle('{"group":"Spec::Matchers::Matcher","description":"is diffable when told to be","status":"passed"}');
handle('{"progress":44.6}');
handle('{"group":"Spec::Matchers::Matcher","description":"provides expected","status":"passed"}');
handle('{"progress":44.7}');
handle('{"group":"Spec::Matchers::Matcher","description":"provides actual","status":"passed"}');
handle('{"progress":44.7}');
handle('{"group":"Spec::Matchers::Matcher","description":"supports helper methods","status":"passed"}');
handle('{"progress":44.8}');
handle('{"group":"Spec::Matchers::Matcher","description":"supports fluent interface","status":"passed"}');
handle('{"progress":44.9}');
handle('{"group":"Spec::Matchers::Matcher","description":"treats method missing normally for undeclared methods","status":"passed"}');
handle('{"progress":44.9}');
handle('{"group":"Spec::Matchers::Matcher","description":"has access to other matchers","status":"passed"}');
handle('{"progress":45.0}');
handle('{"group":"Spec::Matchers::Matcher","description":"lets you override the actual() in messages","status":"passed"}');
handle('{"progress":45.1}');
handle('{"group":"Spec::Matchers::Matcher without overrides","description":"provides a default description","status":"passed"}');
handle('{"progress":45.1}');
handle('{"group":"Spec::Matchers::Matcher without overrides","description":"provides a default failure message for #should","status":"passed"}');
handle('{"progress":45.2}');
handle('{"group":"Spec::Matchers::Matcher without overrides","description":"provides a default failure message for #should_not","status":"passed"}');
handle('{"progress":45.3}');
handle('{"group":"Spec::Matchers::Matcher with overrides","description":"does not hide result of match block when true","status":"passed"}');
handle('{"progress":45.3}');
handle('{"group":"Spec::Matchers::Matcher with overrides","description":"does not hide result of match block when false","status":"passed"}');
handle('{"progress":45.4}');
handle('{"group":"Spec::Matchers::Matcher with overrides","description":"overrides the description","status":"passed"}');
handle('{"progress":45.5}');
handle('{"group":"Spec::Matchers::Matcher with overrides","description":"overrides the failure message for #should","status":"passed"}');
handle('{"progress":45.6}');
handle('{"group":"Spec::Matchers::Matcher with overrides","description":"overrides the failure message for #should_not","status":"passed"}');
handle('{"progress":45.6}');
handle('{"group":"Spec::Matchers::Matcher#new","description":"passes matches? arg to match block","status":"passed"}');
handle('{"progress":45.7}');
handle('{"group":"Spec::Matchers::Matcher#new","description":"exposes arg submitted through #new to matcher block","status":"passed"}');
handle('{"progress":45.8}');
handle('{"group":"Spec::Matchers::Matcher with no args","description":"matches","status":"passed"}');
handle('{"progress":45.8}');
handle('{"group":"Spec::Matchers::Matcher with no args","description":"describes","status":"passed"}');
handle('{"progress":45.9}');
handle('{"group":"Spec::Matchers::Matcher with 1 arg","description":"matches","status":"passed"}');
handle('{"progress":46.0}');
handle('{"group":"Spec::Matchers::Matcher with 1 arg","description":"describes","status":"passed"}');
handle('{"progress":46.0}');
handle('{"group":"Spec::Matchers::Matcher with multiple args","description":"matches","status":"passed"}');
handle('{"progress":46.1}');
handle('{"group":"Spec::Matchers::Matcher with multiple args","description":"describes","status":"passed"}');
handle('{"progress":46.2}');
handle('{"group":"Spec::Matchers::Matcher#wrapped_assertion with a passing assertion","description":"passes as you would expect","status":"passed"}');
handle('{"progress":46.2}');
handle('{"group":"Spec::Matchers::Matcher#wrapped_assertion with a passing assertion","description":"fails as you would expect","status":"passed"}');
handle('{"progress":46.3}');
handle('{"group":"should ==","description":"should delegate message to target","status":"passed"}');
handle('{"progress":46.4}');
handle('{"group":"should ==","description":"should return true on success","status":"passed"}');
handle('{"progress":46.4}');
handle('{"group":"should ==","description":"should fail when target.==(actual) returns false","status":"passed"}');
handle('{"progress":46.5}');
handle('{"group":"should_not ==","description":"should delegate message to target","status":"passed"}');
handle('{"progress":46.6}');
handle('{"group":"should_not ==","description":"should return true on success","status":"passed"}');
handle('{"progress":46.7}');
handle('{"group":"should_not ==","description":"should fail when target.==(actual) returns false","status":"passed"}');
handle('{"progress":46.7}');
handle('{"group":"should ===","description":"should delegate message to target","status":"passed"}');
handle('{"progress":46.8}');
handle('{"group":"should ===","description":"should fail when target.===(actual) returns false","status":"passed"}');
handle('{"progress":46.9}');
handle('{"group":"should_not ===","description":"should delegate message to target","status":"passed"}');
handle('{"progress":46.9}');
handle('{"group":"should_not ===","description":"should fail when target.===(actual) returns false","status":"passed"}');
handle('{"progress":47.0}');
handle('{"group":"should =~","description":"should delegate message to target","status":"passed"}');
handle('{"progress":47.1}');
handle('{"group":"should =~","description":"should fail when target.=~(actual) returns false","status":"passed"}');
handle('{"progress":47.1}');
handle('{"group":"should_not =~","description":"should delegate message to target","status":"passed"}');
handle('{"progress":47.2}');
handle('{"group":"should_not =~","description":"should fail when target.=~(actual) returns false","status":"passed"}');
handle('{"progress":47.3}');
handle('{"group":"should >","description":"should pass if &gt; passes","status":"passed"}');
handle('{"progress":47.3}');
handle('{"group":"should >","description":"should fail if &gt; fails","status":"passed"}');
handle('{"progress":47.4}');
handle('{"group":"should >=","description":"should pass if &gt;= passes","status":"passed"}');
handle('{"progress":47.5}');
handle('{"group":"should >=","description":"should fail if &gt; fails","status":"passed"}');
handle('{"progress":47.5}');
handle('{"group":"should <","description":"should pass if &lt; passes","status":"passed"}');
handle('{"progress":47.6}');
handle('{"group":"should <","description":"should fail if &gt; fails","status":"passed"}');
handle('{"progress":47.7}');
handle('{"group":"should <=","description":"should pass if &lt;= passes","status":"passed"}');
handle('{"progress":47.8}');
handle('{"group":"should <=","description":"should fail if &gt; fails","status":"passed"}');
handle('{"progress":47.8}');
handle('{"group":"Spec::Matchers::PositiveOperatorMatcher","description":"should work when the target has implemented #send","status":"passed"}');
handle('{"progress":47.9}');
handle('{"group":"Spec::Matchers::NegativeOperatorMatcher","description":"should work when the target has implemented #send","status":"passed"}');
handle('{"progress":48.0}');
handle('{"group":"should raise_error","description":"should pass if anything is raised","status":"passed"}');
handle('{"progress":48.0}');
handle('{"group":"should raise_error","description":"should fail if nothing is raised","status":"passed"}');
handle('{"progress":48.1}');
handle('{"group":"should raise_error {|err| ... }","description":"passes if there is an error","status":"passed"}');
handle('{"progress":48.2}');
handle('{"group":"should raise_error {|err| ... }","description":"passes the error to the block","status":"passed"}');
handle('{"progress":48.2}');
handle('{"group":"should_not raise_error","description":"should pass if nothing is raised","status":"passed"}');
handle('{"progress":48.3}');
handle('{"group":"should_not raise_error","description":"should fail if anything is raised","status":"passed"}');
handle('{"progress":48.4}');
handle('{"group":"should raise_error(message)","description":"should pass if RuntimeError is raised with the right message","status":"passed"}');
handle('{"progress":48.4}');
handle('{"group":"should raise_error(message)","description":"should pass if RuntimeError is raised with a matching message","status":"passed"}');
handle('{"progress":48.5}');
handle('{"group":"should raise_error(message)","description":"should pass if any other error is raised with the right message","status":"passed"}');
handle('{"progress":48.6}');
handle('{"group":"should raise_error(message)","description":"should fail if RuntimeError error is raised with the wrong message","status":"passed"}');
handle('{"progress":48.6}');
handle('{"group":"should raise_error(message)","description":"should fail if any other error is raised with the wrong message","status":"passed"}');
handle('{"progress":48.7}');
handle('{"group":"should_not raise_error(message)","description":"should pass if RuntimeError error is raised with the different message","status":"passed"}');
handle('{"progress":48.8}');
handle('{"group":"should_not raise_error(message)","description":"should pass if any other error is raised with the wrong message","status":"passed"}');
handle('{"progress":48.9}');
handle('{"group":"should_not raise_error(message)","description":"should fail if RuntimeError is raised with message","status":"passed"}');
handle('{"progress":48.9}');
handle('{"group":"should_not raise_error(message)","description":"should fail if any other error is raised with message","status":"passed"}');
handle('{"progress":49.0}');
handle('{"group":"should raise_error(NamedError)","description":"should pass if named error is raised","status":"passed"}');
handle('{"progress":49.1}');
handle('{"group":"should raise_error(NamedError)","description":"should fail if nothing is raised","status":"passed"}');
handle('{"progress":49.1}');
handle('{"group":"should raise_error(NamedError)","description":"should fail if another error is raised (NameError)","status":"passed"}');
handle('{"progress":49.2}');
handle('{"group":"should raise_error(NamedError)","description":"should fail if another error is raised (NameError)","status":"passed"}');
handle('{"progress":49.3}');
handle('{"group":"should_not raise_error(NamedError)","description":"should pass if nothing is raised","status":"passed"}');
handle('{"progress":49.3}');
handle('{"group":"should_not raise_error(NamedError)","description":"should pass if another error is raised","status":"passed"}');
handle('{"progress":49.4}');
handle('{"group":"should_not raise_error(NamedError)","description":"should fail if named error is raised","status":"passed"}');
handle('{"progress":49.5}');
handle('{"group":"should raise_error(NamedError, error_message) with String","description":"should pass if named error is raised with same message","status":"passed"}');
handle('{"progress":49.5}');
handle('{"group":"should raise_error(NamedError, error_message) with String","description":"should fail if nothing is raised","status":"passed"}');
handle('{"progress":49.6}');
handle('{"group":"should raise_error(NamedError, error_message) with String","description":"should fail if incorrect error is raised","status":"passed"}');
handle('{"progress":49.7}');
handle('{"group":"should raise_error(NamedError, error_message) with String","description":"should fail if correct error is raised with incorrect message","status":"passed"}');
handle('{"progress":49.7}');
handle('{"group":"should raise_error(NamedError, error_message) { |err| ... }","description":"should yield exception if named error is raised with same message","status":"passed"}');
handle('{"progress":49.8}');
handle('{"group":"should raise_error(NamedError, error_message) { |err| ... }","description":"yielded block should be able to fail on it\'s own right","status":"passed"}');
handle('{"progress":49.9}');
handle('{"group":"should raise_error(NamedError, error_message) { |err| ... }","description":"should NOT yield exception if no error was thrown","status":"passed"}');
handle('{"progress":50.0}');
handle('{"group":"should raise_error(NamedError, error_message) { |err| ... }","description":"should not yield exception if error class is not matched","status":"passed"}');
handle('{"progress":50.0}');
handle('{"group":"should raise_error(NamedError, error_message) { |err| ... }","description":"should NOT yield exception if error message is not matched","status":"passed"}');
handle('{"progress":50.1}');
handle('{"group":"should_not raise_error(NamedError, error_message) { |err| ... }","description":"should pass if nothing is raised","status":"passed"}');
handle('{"progress":50.2}');
handle('{"group":"should_not raise_error(NamedError, error_message) { |err| ... }","description":"should pass if a different error is raised","status":"passed"}');
handle('{"progress":50.2}');
handle('{"group":"should_not raise_error(NamedError, error_message) { |err| ... }","description":"should pass if same error is raised with different message","status":"passed"}');
handle('{"progress":50.3}');
handle('{"group":"should_not raise_error(NamedError, error_message) { |err| ... }","description":"should fail if named error is raised with same message","status":"passed"}');
handle('{"progress":50.4}');
handle('{"group":"should_not raise_error(NamedError, error_message) with String","description":"should pass if nothing is raised","status":"passed"}');
handle('{"progress":50.4}');
handle('{"group":"should_not raise_error(NamedError, error_message) with String","description":"should pass if a different error is raised","status":"passed"}');
handle('{"progress":50.5}');
handle('{"group":"should_not raise_error(NamedError, error_message) with String","description":"should pass if same error is raised with different message","status":"passed"}');
handle('{"progress":50.6}');
handle('{"group":"should_not raise_error(NamedError, error_message) with String","description":"should fail if named error is raised with same message","status":"passed"}');
handle('{"progress":50.6}');
handle('{"group":"should raise_error(NamedError, error_message) with Regexp","description":"should pass if named error is raised with matching message","status":"passed"}');
handle('{"progress":50.7}');
handle('{"group":"should raise_error(NamedError, error_message) with Regexp","description":"should fail if nothing is raised","status":"passed"}');
handle('{"progress":50.8}');
handle('{"group":"should raise_error(NamedError, error_message) with Regexp","description":"should fail if incorrect error is raised","status":"passed"}');
handle('{"progress":50.8}');
handle('{"group":"should raise_error(NamedError, error_message) with Regexp","description":"should fail if correct error is raised with incorrect message","status":"passed"}');
handle('{"progress":50.9}');
handle('{"group":"should_not raise_error(NamedError, error_message) with Regexp","description":"should pass if nothing is raised","status":"passed"}');
handle('{"progress":51.0}');
handle('{"group":"should_not raise_error(NamedError, error_message) with Regexp","description":"should pass if a different error is raised","status":"passed"}');
handle('{"progress":51.0}');
handle('{"group":"should_not raise_error(NamedError, error_message) with Regexp","description":"should pass if same error is raised with non-matching message","status":"passed"}');
handle('{"progress":51.1}');
handle('{"group":"should_not raise_error(NamedError, error_message) with Regexp","description":"should fail if named error is raised with matching message","status":"passed"}');
handle('{"progress":51.2}');
handle('{"group":"should respond_to(:sym)","description":"passes if target responds to :sym","status":"passed"}');
handle('{"progress":51.3}');
handle('{"group":"should respond_to(:sym)","description":"fails if target does not respond to :sym","status":"passed"}');
handle('{"progress":51.3}');
handle('{"group":"should respond_to(:sym).with(1).argument","description":"passes if target responds to :sym with 1 arg","status":"passed"}');
handle('{"progress":51.4}');
handle('{"group":"should respond_to(:sym).with(1).argument","description":"fails if target does not respond to :sym","status":"passed"}');
handle('{"progress":51.5}');
handle('{"group":"should respond_to(:sym).with(1).argument","description":"fails if :sym expects 0 args","status":"passed"}');
handle('{"progress":51.5}');
handle('{"group":"should respond_to(:sym).with(1).argument","description":"fails if :sym expects 2 args","status":"passed"}');
handle('{"progress":51.6}');
handle('{"group":"should respond_to(message1, message2)","description":"passes if target responds to both messages","status":"passed"}');
handle('{"progress":51.7}');
handle('{"group":"should respond_to(message1, message2)","description":"fails if target does not respond to first message","status":"passed"}');
handle('{"progress":51.7}');
handle('{"group":"should respond_to(message1, message2)","description":"fails if target does not respond to second message","status":"passed"}');
handle('{"progress":51.8}');
handle('{"group":"should respond_to(message1, message2)","description":"fails if target does not respond to either message","status":"passed"}');
handle('{"progress":51.9}');
handle('{"group":"should respond_to(:sym).with(2).arguments","description":"passes if target responds to :sym with 2 args","status":"passed"}');
handle('{"progress":51.9}');
handle('{"group":"should respond_to(:sym).with(2).arguments","description":"fails if target does not respond to :sym","status":"passed"}');
handle('{"progress":52.0}');
handle('{"group":"should respond_to(:sym).with(2).arguments","description":"fails if :sym expects 0 args","status":"passed"}');
handle('{"progress":52.1}');
handle('{"group":"should respond_to(:sym).with(2).arguments","description":"fails if :sym expects 2 args","status":"passed"}');
handle('{"progress":52.1}');
handle('{"group":"should_not respond_to(:sym)","description":"passes if target does not respond to :sym","status":"passed"}');
handle('{"progress":52.2}');
handle('{"group":"should_not respond_to(:sym)","description":"fails if target responds to :sym","status":"passed"}');
handle('{"progress":52.3}');
handle('{"group":"should satisfy { block }","description":"should pass if block returns true","status":"passed"}');
handle('{"progress":52.4}');
handle('{"group":"should satisfy { block }","description":"should fail if block returns false","status":"passed"}');
handle('{"progress":52.4}');
handle('{"group":"should_not satisfy { block }","description":"should pass if block returns false","status":"passed"}');
handle('{"progress":52.5}');
handle('{"group":"should_not satisfy { block }","description":"should fail if block returns true","status":"passed"}');
handle('{"progress":52.6}');
handle('{"group":"Spec::Matchers::SimpleMatcher","description":"should pass match arg to block","status":"passed"}');
handle('{"progress":52.6}');
handle('{"group":"Spec::Matchers::SimpleMatcher","description":"should provide a stock failure message","status":"passed"}');
handle('{"progress":52.7}');
handle('{"group":"Spec::Matchers::SimpleMatcher","description":"should provide a stock negative failure message","status":"passed"}');
handle('{"progress":52.8}');
handle('{"group":"Spec::Matchers::SimpleMatcher","description":"should provide the given description","status":"passed"}');
handle('{"progress":52.8}');
handle('{"group":"Spec::Matchers::SimpleMatcher","description":"should fail if a wrapped \'should\' fails","status":"passed"}');
handle('{"progress":52.9}');
handle('{"group":"with arity of 2","description":"should provide the matcher so you can access its messages","status":"passed"}');
handle('{"progress":53.0}');
handle('{"group":"with arity of 2","description":"should support a custom failure message","status":"passed"}');
handle('{"progress":53.0}');
handle('{"group":"with arity of 2","description":"should complain when asked for a failure message if you don\'t give it a description or a message","status":"passed"}');
handle('{"progress":53.1}');
handle('{"group":"with arity of 2","description":"should support a custom negative failure message","status":"passed"}');
handle('{"progress":53.2}');
handle('{"group":"with arity of 2","description":"should complain when asked for a negative failure message if you don\'t give it a description or a message","status":"passed"}');
handle('{"progress":53.2}');
handle('{"group":"with arity of 2","description":"should support a custom description","status":"passed"}');
handle('{"progress":53.3}');
handle('{"group":"with arity of 2","description":"should tell you no description was provided when it doesn\'t receive one","status":"passed"}');
handle('{"progress":53.4}');
handle('{"group":"Spec::Matchers::ThrowSymbol with no args","description":"should match if any Symbol is thrown","status":"passed"}');
handle('{"progress":53.5}');
handle('{"group":"Spec::Matchers::ThrowSymbol with no args","description":"should match if any Symbol is thrown with an arg","status":"passed"}');
handle('{"progress":53.5}');
handle('{"group":"Spec::Matchers::ThrowSymbol with no args","description":"should not match if no Symbol is thrown","status":"passed"}');
handle('{"progress":53.6}');
handle('{"group":"Spec::Matchers::ThrowSymbol with no args","description":"should provide a failure message","status":"passed"}');
handle('{"progress":53.7}');
handle('{"group":"Spec::Matchers::ThrowSymbol with no args","description":"should provide a negative failure message","status":"passed"}');
handle('{"progress":53.7}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should match if correct Symbol is thrown","status":"passed"}');
handle('{"progress":53.8}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should match if correct Symbol is thrown with an arg","status":"passed"}');
handle('{"progress":53.9}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should not match if no Symbol is thrown","status":"passed"}');
handle('{"progress":53.9}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should not match if correct Symbol is thrown","status":"passed"}');
handle('{"progress":54.0}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should provide a failure message when no Symbol is thrown","status":"passed"}');
handle('{"progress":54.1}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should provide a failure message when wrong Symbol is thrown","status":"passed"}');
handle('{"progress":54.1}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should provide a negative failure message","status":"passed"}');
handle('{"progress":54.2}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol","description":"should only match NameErrors raised by uncaught throws","status":"passed"}');
handle('{"progress":54.3}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should match if correct Symbol and args are thrown","status":"passed"}');
handle('{"progress":54.3}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should not match if nothing is thrown","status":"passed"}');
handle('{"progress":54.4}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should not match if other Symbol is thrown","status":"passed"}');
handle('{"progress":54.5}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should not match if no arg is thrown","status":"passed"}');
handle('{"progress":54.6}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should not match if wrong arg is thrown","status":"passed"}');
handle('{"progress":54.6}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should provide a failure message when no Symbol is thrown","status":"passed"}');
handle('{"progress":54.7}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should provide a failure message when wrong Symbol is thrown","status":"passed"}');
handle('{"progress":54.8}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should provide a negative failure message","status":"passed"}');
handle('{"progress":54.8}');
handle('{"group":"Spec::Matchers::ThrowSymbol with a symbol and an arg","description":"should only match NameErrors raised by uncaught throws","status":"passed"}');
handle('{"progress":54.9}');
handle('{"group":"AnyNumberOfTimes","description":"should pass if any number of times method is called many times","status":"passed"}');
handle('{"progress":55.0}');
handle('{"group":"AnyNumberOfTimes","description":"should pass if any number of times method is called once","status":"passed"}');
handle('{"progress":55.0}');
handle('{"group":"AnyNumberOfTimes","description":"should pass if any number of times method is not called","status":"passed"}');
handle('{"progress":55.1}');
handle('{"group":"AnyNumberOfTimes","description":"should return the mocked value when called after a similar stub","status":"passed"}');
handle('{"progress":55.2}');
handle('{"group":"Spec::Mocks::ArgumentExpectation","description":"should consider an object that responds to #matches? and #description to be a matcher","status":"passed"}');
handle('{"progress":55.2}');
handle('{"group":"Spec::Mocks::ArgumentExpectation","description":"should NOT consider an object that only responds to #matches? to be a matcher","status":"passed"}');
handle('{"progress":55.3}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::AnyArgsMatcher","description":"represents itself nicely for failure messages","status":"passed"}');
handle('{"progress":55.4}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::AnyArgMatcher","description":"represents itself nicely for failure messages","status":"passed"}');
handle('{"progress":55.4}');
handle('{"group":"at_least","description":"should fail if method is never called","status":"passed"}');
handle('{"progress":55.5}');
handle('{"group":"at_least","description":"should fail when called less than n times","status":"passed"}');
handle('{"progress":55.6}');
handle('{"group":"at_least","description":"should fail when at least once method is never called","status":"passed"}');
handle('{"progress":55.7}');
handle('{"group":"at_least","description":"should fail when at least twice method is called once","status":"passed"}');
handle('{"progress":55.7}');
handle('{"group":"at_least","description":"should fail when at least twice method is never called","status":"passed"}');
handle('{"progress":55.8}');
handle('{"group":"at_least","description":"should pass when at least n times method is called exactly n times","status":"passed"}');
handle('{"progress":55.9}');
handle('{"group":"at_least","description":"should pass when at least n times method is called n plus 1 times","status":"passed"}');
handle('{"progress":55.9}');
handle('{"group":"at_least","description":"should pass when at least once method is called once","status":"passed"}');
handle('{"progress":56.0}');
handle('{"group":"at_least","description":"should pass when at least once method is called twice","status":"passed"}');
handle('{"progress":56.1}');
handle('{"group":"at_least","description":"should pass when at least twice method is called three times","status":"passed"}');
handle('{"progress":56.1}');
handle('{"group":"at_least","description":"should pass when at least twice method is called twice","status":"passed"}');
handle('{"progress":56.2}');
handle('{"group":"at_most","description":"should fail when at most n times method is called n plus 1 times","status":"passed"}');
handle('{"progress":56.3}');
handle('{"group":"at_most","description":"should fail when at most once method is called twice","status":"passed"}');
handle('{"progress":56.3}');
handle('{"group":"at_most","description":"should fail when at most twice method is called three times","status":"passed"}');
handle('{"progress":56.4}');
handle('{"group":"at_most","description":"should pass when at most n times method is called exactly n times","status":"passed"}');
handle('{"progress":56.5}');
handle('{"group":"at_most","description":"should pass when at most n times method is called less than n times","status":"passed"}');
handle('{"progress":56.5}');
handle('{"group":"at_most","description":"should pass when at most n times method is never called","status":"passed"}');
handle('{"progress":56.6}');
handle('{"group":"at_most","description":"should pass when at most once method is called once","status":"passed"}');
handle('{"progress":56.7}');
handle('{"group":"at_most","description":"should pass when at most once method is never called","status":"passed"}');
handle('{"progress":56.7}');
handle('{"group":"at_most","description":"should pass when at most twice method is called once","status":"passed"}');
handle('{"progress":56.8}');
handle('{"group":"at_most","description":"should pass when at most twice method is called twice","status":"passed"}');
handle('{"progress":56.9}');
handle('{"group":"at_most","description":"should pass when at most twice method is never called","status":"passed"}');
handle('{"progress":57.0}');
handle('{"group":"An RSpec Mock","description":"should hide internals in its inspect representation","status":"passed"}');
handle('{"progress":57.0}');
handle('{"group":"Mock","description":"when one example has an expectation (non-mock) inside the block passed to the mock","status":"passed"}');
handle('{"progress":57.1}');
handle('{"group":"Mock","description":"then the next example should behave as expected instead of saying","status":"passed"}');
handle('{"progress":57.2}');
handle('{"group":"should_receive","description":"should work when object lies about responding to a method","status":"passed"}');
handle('{"progress":57.2}');
handle('{"group":"should_receive","description":"should work when class lies about responding to a method","status":"passed"}');
handle('{"progress":57.3}');
handle('{"group":"should_receive","description":"should cleanup after itself","status":"passed"}');
handle('{"progress":57.4}');
handle('{"group":"mock failure","description":"should tell you when it receives the right message with the wrong args","status":"passed"}');
handle('{"progress":57.4}');
handle('{"group":"mock failure","description":"should tell you when it receives the right message with the wrong args if you stub the method","message":"fix bug 15719","status":"pending"}');
handle('{"progress":57.5}');
handle('{"group":"a message expectation on a base class object","description":"should correctly pick up message sent to it subclass","message":"fix for http://rspec.lighthouseapp.com/projects/5645/tickets/496","status":"pending"}');
handle('{"progress":57.6}');
handle('{"group":"stubbing a class method","description":"should work","status":"passed"}');
handle('{"progress":57.6}');
handle('{"group":"stubbing a class method","description":"should restore the original method","status":"passed"}');
handle('{"progress":57.7}');
handle('{"group":"A Partial Mock","description":"should respect subclasses","status":"passed"}');
handle('{"progress":57.8}');
handle('{"group":"A Partial Mock","description":"should","status":"passed"}');
handle('{"progress":57.8}');
handle('{"group":"Stubs should correctly restore module methods","description":"1 - stub the open method","status":"passed"}');
handle('{"progress":57.9}');
handle('{"group":"Stubs should correctly restore module methods","description":"2 - use File.open to create example.txt","status":"passed"}');
handle('{"progress":58.0}');
handle('{"group":"An object where respond_to? is true and does not have method","description":"should not raise an exception for Object","status":"passed"}');
handle('{"progress":58.1}');
handle('{"group":"An object where respond_to? is true and does not have method","description":"should not raise an exception for mock","status":"passed"}');
handle('{"progress":58.1}');
handle('{"group":"Bug report 8302:","description":"class method is not restored correctly when proxied","status":"passed"}');
handle('{"progress":58.2}');
handle('{"group":"Bug report 8302:","description":"instance method is not restored correctly when proxied","status":"passed"}');
handle('{"progress":58.3}');
handle('{"group":"Calling a method that catches StandardError","description":"still reports mock failures","status":"passed"}');
handle('{"progress":58.3}');
handle('{"group":"double","description":"is an alias for stub and mock","status":"passed"}');
handle('{"progress":58.4}');
handle('{"group":"double","description":"uses \'Double\' in failure messages","status":"passed"}');
handle('{"progress":58.5}');
handle('{"group":"failing MockArgumentMatchers","description":"should reject non boolean","status":"passed"}');
handle('{"progress":58.5}');
handle('{"group":"failing MockArgumentMatchers","description":"should reject non numeric","status":"passed"}');
handle('{"progress":58.6}');
handle('{"group":"failing MockArgumentMatchers","description":"should reject non string","status":"passed"}');
handle('{"progress":58.7}');
handle('{"group":"failing MockArgumentMatchers","description":"should reject goose when expecting a duck","status":"passed"}');
handle('{"progress":58.7}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail if regexp does not match submitted string","status":"passed"}');
handle('{"progress":58.8}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail if regexp does not match submitted regexp","status":"passed"}');
handle('{"progress":58.9}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail for a hash w/ wrong values","status":"passed"}');
handle('{"progress":58.9}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail for a hash w/ wrong keys","status":"passed"}');
handle('{"progress":59.0}');
handle('{"group":"failing MockArgumentMatchers","description":"should match against a Matcher","status":"passed"}');
handle('{"progress":59.1}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail no_args with one arg","status":"passed"}');
handle('{"progress":59.2}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail hash_including with missing key","status":"passed"}');
handle('{"progress":59.2}');
handle('{"group":"failing MockArgumentMatchers","description":"should fail with block matchers","status":"passed"}');
handle('{"progress":59.3}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher","description":"should describe itself properly","status":"passed"}');
handle('{"progress":59.4}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing","description":"should match the same hash","status":"passed"}');
handle('{"progress":59.4}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing","description":"should match a hash with extra stuff","status":"passed"}');
handle('{"progress":59.5}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when matching against other matchers","description":"should match an int against anything()","status":"passed"}');
handle('{"progress":59.6}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when matching against other matchers","description":"should match a string against anything()","status":"passed"}');
handle('{"progress":59.6}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when passed only keys or keys mixed with key/value pairs","description":"should match if the key is present","status":"passed"}');
handle('{"progress":59.7}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when passed only keys or keys mixed with key/value pairs","description":"should match if more keys are present","status":"passed"}');
handle('{"progress":59.8}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when passed only keys or keys mixed with key/value pairs","description":"should match a string against a given key","status":"passed"}');
handle('{"progress":59.8}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when passed only keys or keys mixed with key/value pairs","description":"should match if passed one key and one key/value pair","status":"passed"}');
handle('{"progress":59.9}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when passed only keys or keys mixed with key/value pairs","description":"should match if passed many keys and one key/value pair","status":"passed"}');
handle('{"progress":60.0}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher passing when passed only keys or keys mixed with key/value pairs","description":"should match if passed many keys and many key/value pairs","status":"passed"}');
handle('{"progress":60.0}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match a non-hash","status":"passed"}');
handle('{"progress":60.1}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match a hash with a missing key","status":"passed"}');
handle('{"progress":60.2}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match a hash with a missing key","status":"passed"}');
handle('{"progress":60.3}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match an empty hash with a given key","status":"passed"}');
handle('{"progress":60.3}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match a hash with a missing key when one pair is matching","status":"passed"}');
handle('{"progress":60.4}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match a hash with an incorrect value","status":"passed"}');
handle('{"progress":60.5}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashIncludingMatcher failing","description":"should not match when values are nil but keys are different","status":"passed"}');
handle('{"progress":60.5}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher","description":"should describe itself properly","status":"passed"}');
handle('{"progress":60.6}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher passing","description":"should match a hash without the specified key","status":"passed"}');
handle('{"progress":60.7}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher passing","description":"should match a hash with the specified key, but different value","status":"passed"}');
handle('{"progress":60.7}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher passing","description":"should match a hash without the specified key, given as anything()","status":"passed"}');
handle('{"progress":60.8}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher passing","description":"should match an empty hash","status":"passed"}');
handle('{"progress":60.9}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher passing","description":"should match a hash without any of the specified keys","status":"passed"}');
handle('{"progress":60.9}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a non-hash","status":"passed"}');
handle('{"progress":61.0}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a hash with a specified key","status":"passed"}');
handle('{"progress":61.1}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a hash with the specified key/value pair","status":"passed"}');
handle('{"progress":61.1}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a hash with the specified key","status":"passed"}');
handle('{"progress":61.2}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a hash with one of the specified keys","status":"passed"}');
handle('{"progress":61.3}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a hash with some of the specified keys","status":"passed"}');
handle('{"progress":61.4}');
handle('{"group":"Spec::Mocks::ArgumentMatchers::HashNotIncludingMatcher failing","description":"should not match a hash with one key/value pair included","status":"passed"}');
handle('{"progress":61.4}');
handle('{"group":"Mock ordering","description":"should pass two calls in order","status":"passed"}');
handle('{"progress":61.5}');
handle('{"group":"Mock ordering","description":"should pass three calls in order","status":"passed"}');
handle('{"progress":61.6}');
handle('{"group":"Mock ordering","description":"should fail if second call comes first","status":"passed"}');
handle('{"progress":61.6}');
handle('{"group":"Mock ordering","description":"should fail if third call comes first","status":"passed"}');
handle('{"progress":61.7}');
handle('{"group":"Mock ordering","description":"should fail if third call comes second","status":"passed"}');
handle('{"progress":61.8}');
handle('{"group":"Mock ordering","description":"should ignore order of non ordered calls","status":"passed"}');
handle('{"progress":61.8}');
handle('{"group":"Mock ordering","description":"should pass when duplicates exist","status":"passed"}');
handle('{"progress":61.9}');
handle('{"group":"Spec::Mocks::Space","description":"should verify all mocks within","status":"passed"}');
handle('{"progress":62.0}');
handle('{"group":"Spec::Mocks::Space","description":"should reset all mocks within","status":"passed"}');
handle('{"progress":62.0}');
handle('{"group":"Spec::Mocks::Space","description":"should clear internal mocks on reset_all","status":"passed"}');
handle('{"progress":62.1}');
handle('{"group":"Spec::Mocks::Space","description":"should only add an instance once","status":"passed"}');
handle('{"progress":62.2}');
handle('{"group":"Spec::Mocks::Mock","description":"should have method_missing as private","status":"passed"}');
handle('{"progress":62.2}');
handle('{"group":"Spec::Mocks::Mock","description":"should not respond_to? method_missing (because it\'s private)","status":"passed"}');
handle('{"progress":62.3}');
handle('{"group":"Spec::Mocks::Mock","description":"should report line number of expectation of unreceived message","status":"passed"}');
handle('{"progress":62.4}');
handle('{"group":"Spec::Mocks::Mock","description":"should report line number of expectation of unreceived message after #should_receive after similar stub","status":"passed"}');
handle('{"progress":62.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should pass when not receiving message specified as not to be received","status":"passed"}');
handle('{"progress":62.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should pass when receiving message specified as not to be received with different args","status":"passed"}');
handle('{"progress":62.6}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail when receiving message specified as not to be received","status":"passed"}');
handle('{"progress":62.7}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail when receiving message specified as not to be received with args","status":"passed"}');
handle('{"progress":62.7}');
handle('{"group":"Spec::Mocks::Mock","description":"should pass when receiving message specified as not to be received with wrong args","status":"passed"}');
handle('{"progress":62.8}');
handle('{"group":"Spec::Mocks::Mock","description":"should allow block to calculate return values","status":"passed"}');
handle('{"progress":62.9}');
handle('{"group":"Spec::Mocks::Mock","description":"should allow parameter as return value","status":"passed"}');
handle('{"progress":62.9}');
handle('{"group":"Spec::Mocks::Mock","description":"should return nil if no return value set","status":"passed"}');
handle('{"progress":63.0}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise exception if args don\'t match when method called","status":"passed"}');
handle('{"progress":63.1}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise exception if args don\'t match when method called even when the method is stubbed","status":"passed"}');
handle('{"progress":63.1}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise exception if args don\'t match when method called even when using null_object","status":"passed"}');
handle('{"progress":63.2}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail if unexpected method called","status":"passed"}');
handle('{"progress":63.3}');
handle('{"group":"Spec::Mocks::Mock","description":"should use block for expectation if provided","status":"passed"}');
handle('{"progress":63.3}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail if expectation block fails","status":"passed"}');
handle('{"progress":63.4}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail right away when method defined as never is received","status":"passed"}');
handle('{"progress":63.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should eventually fail when method defined as never is received","status":"passed"}');
handle('{"progress":63.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise when told to","status":"passed"}');
handle('{"progress":63.6}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise passed an Exception instance","status":"passed"}');
handle('{"progress":63.7}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise RuntimeError with passed message","status":"passed"}');
handle('{"progress":63.8}');
handle('{"group":"Spec::Mocks::Mock","description":"should not raise when told to if args dont match","status":"passed"}');
handle('{"progress":63.8}');
handle('{"group":"Spec::Mocks::Mock","description":"should throw when told to","status":"passed"}');
handle('{"progress":63.9}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise when explicit return and block constrained","status":"passed"}');
handle('{"progress":64.0}');
handle('{"group":"Spec::Mocks::Mock","description":"should ignore args on any args","status":"passed"}');
handle('{"progress":64.0}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail on no args if any args received","status":"passed"}');
handle('{"progress":64.1}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail when args are expected but none are received","status":"passed"}');
handle('{"progress":64.2}');
handle('{"group":"Spec::Mocks::Mock","description":"should return value from block by default","status":"passed"}');
handle('{"progress":64.2}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield 0 args to blocks that take a variable number of arguments","status":"passed"}');
handle('{"progress":64.3}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield 0 args multiple times to blocks that take a variable number of arguments","status":"passed"}');
handle('{"progress":64.4}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield one arg to blocks that take a variable number of arguments","status":"passed"}');
handle('{"progress":64.4}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield one arg 3 times consecutively to blocks that take a variable number of arguments","status":"passed"}');
handle('{"progress":64.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield many args to blocks that take a variable number of arguments","status":"passed"}');
handle('{"progress":64.6}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield many args 3 times consecutively to blocks that take a variable number of arguments","status":"passed"}');
handle('{"progress":64.6}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield single value","status":"passed"}');
handle('{"progress":64.7}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield single value 3 times consecutively","status":"passed"}');
handle('{"progress":64.8}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield two values","status":"passed"}');
handle('{"progress":64.9}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield two values 3 times consecutively","status":"passed"}');
handle('{"progress":64.9}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail when calling yielding method with wrong arity","status":"passed"}');
handle('{"progress":65.0}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail when calling yielding method consecutively with wrong arity","status":"passed"}');
handle('{"progress":65.1}');
handle('{"group":"Spec::Mocks::Mock","description":"should fail when calling yielding method without block","status":"passed"}');
handle('{"progress":65.1}');
handle('{"group":"Spec::Mocks::Mock","description":"should be able to mock send","status":"passed"}');
handle('{"progress":65.2}');
handle('{"group":"Spec::Mocks::Mock","description":"should be able to raise from method calling yielding mock","status":"passed"}');
handle('{"progress":65.3}');
handle('{"group":"Spec::Mocks::Mock","description":"should clear expectations after verify","status":"passed"}');
handle('{"progress":65.3}');
handle('{"group":"Spec::Mocks::Mock","description":"should restore objects to their original state on rspec_reset","status":"passed"}');
handle('{"progress":65.4}');
handle('{"group":"Spec::Mocks::Mock","description":"should work even after method_missing starts raising NameErrors instead of NoMethodErrors","status":"passed"}');
handle('{"progress":65.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should temporarily replace a method stub on a mock","status":"passed"}');
handle('{"progress":65.5}');
handle('{"group":"Spec::Mocks::Mock","description":"should not require a different signature to replace a method stub","status":"passed"}');
handle('{"progress":65.6}');
handle('{"group":"Spec::Mocks::Mock","description":"should raise an error when a previously stubbed method has a negative expectation","status":"passed"}');
handle('{"progress":65.7}');
handle('{"group":"Spec::Mocks::Mock","description":"should temporarily replace a method stub on a non-mock","status":"passed"}');
handle('{"progress":65.7}');
handle('{"group":"Spec::Mocks::Mock","description":"should return the stubbed value when no new value specified","status":"passed"}');
handle('{"progress":65.8}');
handle('{"group":"Spec::Mocks::Mock","description":"should not mess with the stub\'s yielded values when also mocked","status":"passed"}');
handle('{"progress":65.9}');
handle('{"group":"Spec::Mocks::Mock","description":"should yield multiple values after a similar stub","status":"passed"}');
handle('{"progress":66.0}');
handle('{"group":"Spec::Mocks::Mock","description":"should assign stub return values","status":"passed"}');
handle('{"progress":66.0}');
handle('{"group":"Spec::Mocks::Mock deprecated #stub_everything method","description":"creates a mock that behaves as a null object","status":"passed"}');
handle('{"progress":66.1}');
handle('{"group":"Spec::Mocks::Mock deprecated #stub_everything method","description":"provides deprecation warning","status":"passed"}');
handle('{"progress":66.2}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #should_receive","status":"passed"}');
handle('{"progress":66.2}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #should_receive after a similar stub","status":"passed"}');
handle('{"progress":66.3}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #once","status":"passed"}');
handle('{"progress":66.4}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #twice","status":"passed"}');
handle('{"progress":66.4}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #times","status":"passed"}');
handle('{"progress":66.5}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #any_number_of_times","status":"passed"}');
handle('{"progress":66.6}');
handle('{"group":"a mock message receiving a block","description":"should call the block after #ordered","status":"passed"}');
handle('{"progress":66.6}');
handle('{"group":"string representation generated by #to_s","description":"should not contain &lt; because that might lead to invalid HTML in some situations","status":"passed"}');
handle('{"progress":66.7}');
handle('{"group":"mock created with no name","description":"should not use a name in a failure message","status":"passed"}');
handle('{"progress":66.8}');
handle('{"group":"mock created with no name","description":"should respond to initially stubbed methods","status":"passed"}');
handle('{"progress":66.8}');
handle('{"group":"==","description":"sends == self to the comparison object","status":"passed"}');
handle('{"progress":66.9}');
handle('{"group":"a Mock expectation with multiple return values and no specified count","description":"should return values in order to consecutive calls","status":"passed"}');
handle('{"progress":67.0}');
handle('{"group":"a Mock expectation with multiple return values and no specified count","description":"should complain when there are too few calls","status":"passed"}');
handle('{"progress":67.1}');
handle('{"group":"a Mock expectation with multiple return values and no specified count","description":"should complain when there are too many calls","status":"passed"}');
handle('{"progress":67.1}');
handle('{"group":"a Mock expectation with multiple return values with a specified count equal to the number of values","description":"should return values in order to consecutive calls","status":"passed"}');
handle('{"progress":67.2}');
handle('{"group":"a Mock expectation with multiple return values with a specified count equal to the number of values","description":"should complain when there are too few calls","status":"passed"}');
handle('{"progress":67.3}');
handle('{"group":"a Mock expectation with multiple return values with a specified count equal to the number of values","description":"should complain when there are too many calls","status":"passed"}');
handle('{"progress":67.3}');
handle('{"group":"a Mock expectation with multiple return values specifying at_least less than the number of values","description":"should use last return value for subsequent calls","status":"passed"}');
handle('{"progress":67.4}');
handle('{"group":"a Mock expectation with multiple return values specifying at_least less than the number of values","description":"should fail when called less than the specified number","status":"passed"}');
handle('{"progress":67.5}');
handle('{"group":"a Mock expectation with multiple return values with a specified count larger than the number of values","description":"should use last return value for subsequent calls","status":"passed"}');
handle('{"progress":67.5}');
handle('{"group":"a Mock expectation with multiple return values with a specified count larger than the number of values","description":"should fail when called less than the specified number","status":"passed"}');
handle('{"progress":67.6}');
handle('{"group":"a Mock expectation with multiple return values with a specified count larger than the number of values","description":"should fail when called greater than the specified number","status":"passed"}');
handle('{"progress":67.7}');
handle('{"group":"an expectation set on nil","description":"should issue a warning with file and line number information","status":"passed"}');
handle('{"progress":67.7}');
handle('{"group":"an expectation set on nil","description":"should issue a warning when the expectation is negative","status":"passed"}');
handle('{"progress":67.8}');
handle('{"group":"an expectation set on nil","description":"should not issue a warning when expectations are set to be allowed","status":"passed"}');
handle('{"progress":67.9}');
handle('{"group":"#<Class:0x1201da8>","description":"when called in one example that doesn\'t end up setting an expectation on nil","status":"passed"}');
handle('{"progress":68.0}');
handle('{"group":"#<Class:0x1201da8>","description":"should not effect the next exapmle ran","status":"passed"}');
handle('{"progress":68.0}');
handle('{"group":"#<Class:0x1201da8>","description":"should not effect subsequent examples","status":"passed"}');
handle('{"progress":68.1}');
handle('{"group":"a mock acting as a NullObject","description":"should allow explicit expectation","status":"passed"}');
handle('{"progress":68.2}');
handle('{"group":"a mock acting as a NullObject","description":"should fail verification when explicit exception not met","status":"passed"}');
handle('{"progress":68.2}');
handle('{"group":"a mock acting as a NullObject","description":"should ignore unexpected methods","status":"passed"}');
handle('{"progress":68.3}');
handle('{"group":"a mock acting as a NullObject","description":"should expected message with different args first","status":"passed"}');
handle('{"progress":68.4}');
handle('{"group":"a mock acting as a NullObject","description":"should expected message with different args second","status":"passed"}');
handle('{"progress":68.4}');
handle('{"group":"#null_object?","description":"should default to false","status":"passed"}');
handle('{"progress":68.5}');
handle('{"group":"#as_null_object","description":"should set the object to null_object","status":"passed"}');
handle('{"progress":68.6}');
handle('{"group":"OnceCounts","description":"once should fail when called once with wrong args","status":"passed"}');
handle('{"progress":68.6}');
handle('{"group":"OnceCounts","description":"once should fail when called twice","status":"passed"}');
handle('{"progress":68.7}');
handle('{"group":"OnceCounts","description":"once should fail when not called","status":"passed"}');
handle('{"progress":68.8}');
handle('{"group":"OnceCounts","description":"once should pass when called once","status":"passed"}');
handle('{"progress":68.8}');
handle('{"group":"OnceCounts","description":"once should pass when called once with specified args","status":"passed"}');
handle('{"progress":68.9}');
handle('{"group":"OnceCounts","description":"once should pass when called once with unspecified args","status":"passed"}');
handle('{"progress":69.0}');
handle('{"group":"calling :should_receive with an options hash","description":"should report the file and line submitted with :expected_from","status":"passed"}');
handle('{"progress":69.0}');
handle('{"group":"calling :should_receive with an options hash","description":"should use the message supplied with :message","status":"passed"}');
handle('{"progress":69.1}');
handle('{"group":"calling :should_receive with an options hash","description":"should use the message supplied with :message after a similar stub","status":"passed"}');
handle('{"progress":69.2}');
handle('{"group":"using a Partial Mock,","description":"should name the class in the failure message","status":"passed"}');
handle('{"progress":69.2}');
handle('{"group":"using a Partial Mock,","description":"should name the class in the failure message when expectation is on class","status":"passed"}');
handle('{"progress":69.3}');
handle('{"group":"using a Partial Mock,","description":"should not conflict with @options in the object","status":"passed"}');
handle('{"progress":69.4}');
handle('{"group":"using a Partial Mock,","description":"should_not_receive should mock out the method","status":"passed"}');
handle('{"progress":69.5}');
handle('{"group":"using a Partial Mock,","description":"should_not_receive should return a negative message expectation","status":"passed"}');
handle('{"progress":69.5}');
handle('{"group":"using a Partial Mock,","description":"should_receive should mock out the method","status":"passed"}');
handle('{"progress":69.6}');
handle('{"group":"using a Partial Mock,","description":"should_receive should handle a hash","status":"passed"}');
handle('{"progress":69.7}');
handle('{"group":"using a Partial Mock,","description":"should_receive should handle an inner hash","status":"passed"}');
handle('{"progress":69.7}');
handle('{"group":"using a Partial Mock,","description":"should_receive should return a message expectation","status":"passed"}');
handle('{"progress":69.8}');
handle('{"group":"using a Partial Mock,","description":"should_receive should verify method was called","status":"passed"}');
handle('{"progress":69.9}');
handle('{"group":"using a Partial Mock,","description":"should_receive should also take a String argument","status":"passed"}');
handle('{"progress":69.9}');
handle('{"group":"using a Partial Mock,","description":"should_not_receive should also take a String argument","status":"passed"}');
handle('{"progress":70.0}');
handle('{"group":"using a Partial Mock,","description":"should use report nil in the error message","status":"passed"}');
handle('{"progress":70.1}');
handle('{"group":"Partially mocking an object that defines ==, after another mock has been defined","description":"should not raise an error when stubbing the object","status":"passed"}');
handle('{"progress":70.1}');
handle('{"group":"Method visibility when using partial mocks","description":"should keep public methods public","status":"passed"}');
handle('{"progress":70.2}');
handle('{"group":"Method visibility when using partial mocks","description":"should keep private methods private","status":"passed"}');
handle('{"progress":70.3}');
handle('{"group":"Method visibility when using partial mocks","description":"should keep protected methods protected","status":"passed"}');
handle('{"progress":70.3}');
handle('{"group":"PartialMockUsingMocksDirectly","description":"should fail when expected message is not received","status":"passed"}');
handle('{"progress":70.4}');
handle('{"group":"PartialMockUsingMocksDirectly","description":"should fail when message is received with incorrect args","status":"passed"}');
handle('{"progress":70.5}');
handle('{"group":"PartialMockUsingMocksDirectly","description":"should pass when expected message is received","status":"passed"}');
handle('{"progress":70.6}');
handle('{"group":"PartialMockUsingMocksDirectly","description":"should pass when message is received with correct args","status":"passed"}');
handle('{"progress":70.6}');
handle('{"group":"PartialMockUsingMocksDirectly","description":"should revert to original method if existed","status":"passed"}');
handle('{"progress":70.7}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should accept true as boolean()","status":"passed"}');
handle('{"progress":70.8}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should accept false as boolean()","status":"passed"}');
handle('{"progress":70.8}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should accept fixnum as kind_of(Numeric)","status":"passed"}');
handle('{"progress":70.9}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should accept float as an_instance_of(Numeric)","status":"passed"}');
handle('{"progress":71.0}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"accepts fixnum as instance_of(Fixnum)","status":"passed"}');
handle('{"progress":71.0}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should NOT accept fixnum as instance_of(Numeric)","status":"passed"}');
handle('{"progress":71.1}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should NOT accept float as instance_of(Numeric)","status":"passed"}');
handle('{"progress":71.2}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should accept string as anything()","status":"passed"}');
handle('{"progress":71.2}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should match duck type with one method","status":"passed"}');
handle('{"progress":71.3}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should match duck type with two methods","status":"passed"}');
handle('{"progress":71.4}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should match no args against any_args()","status":"passed"}');
handle('{"progress":71.4}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should match one arg against any_args()","status":"passed"}');
handle('{"progress":71.5}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should match no args against no_args()","status":"passed"}');
handle('{"progress":71.6}');
handle('{"group":"Spec::Mocks::Methods handling argument matchers","description":"should match hash with hash_including same hash","status":"passed"}');
handle('{"progress":71.7}');
handle('{"group":"Spec::Mocks::Methods handling block matchers","description":"should match arguments against RSpec expectations","status":"passed"}');
handle('{"progress":71.7}');
handle('{"group":"Spec::Mocks::Methods handling non-matcher arguments","description":"should match non special symbol (can be removed when deprecated symbols are removed)","status":"passed"}');
handle('{"progress":71.8}');
handle('{"group":"Spec::Mocks::Methods handling non-matcher arguments","description":"should match string against regexp","status":"passed"}');
handle('{"progress":71.9}');
handle('{"group":"Spec::Mocks::Methods handling non-matcher arguments","description":"should match regexp against regexp","status":"passed"}');
handle('{"progress":71.9}');
handle('{"group":"Spec::Mocks::Methods handling non-matcher arguments","description":"should match against a hash submitted and received by value","status":"passed"}');
handle('{"progress":72.0}');
handle('{"group":"Spec::Mocks::Methods handling non-matcher arguments","description":"should match against a hash submitted by reference and received by value","status":"passed"}');
handle('{"progress":72.1}');
handle('{"group":"Spec::Mocks::Methods handling non-matcher arguments","description":"should match against a hash submitted by value and received by reference","status":"passed"}');
handle('{"progress":72.1}');
handle('{"group":"PreciseCounts","description":"should fail when exactly n times method is called less than n times","status":"passed"}');
handle('{"progress":72.2}');
handle('{"group":"PreciseCounts","description":"should fail when exactly n times method is never called","status":"passed"}');
handle('{"progress":72.3}');
handle('{"group":"PreciseCounts","description":"should pass if exactly n times method is called exactly n times","status":"passed"}');
handle('{"progress":72.3}');
handle('{"group":"PreciseCounts","description":"should pass multiple calls with different args and counts","status":"passed"}');
handle('{"progress":72.4}');
handle('{"group":"PreciseCounts","description":"should pass mutiple calls with different args","status":"passed"}');
handle('{"progress":72.5}');
handle('{"group":"a mock","description":"should answer false for received_message? when no messages received","status":"passed"}');
handle('{"progress":72.5}');
handle('{"group":"a mock","description":"should answer true for received_message? when message received","status":"passed"}');
handle('{"progress":72.6}');
handle('{"group":"a mock","description":"should answer true for received_message? when message received with correct args","status":"passed"}');
handle('{"progress":72.7}');
handle('{"group":"a mock","description":"should answer false for received_message? when message received with incorrect args","status":"passed"}');
handle('{"progress":72.8}');
handle('{"group":"A chained method stub","description":"returns expected value from chaining only one method call","status":"passed"}');
handle('{"progress":72.8}');
handle('{"group":"A chained method stub","description":"returns expected value from chaining two method calls","status":"passed"}');
handle('{"progress":72.9}');
handle('{"group":"A chained method stub","description":"returns expected value from chaining four method calls","status":"passed"}');
handle('{"progress":73.0}');
handle('{"group":"A chained method stub","description":"returns expected value from two chains with shared messages at the end","status":"passed"}');
handle('{"progress":73.0}');
handle('{"group":"A chained method stub","description":"returns expected value from two chains with shared messages at the beginning","status":"passed"}');
handle('{"progress":73.1}');
handle('{"group":"stub implementation with no args","description":"execs the block when called","status":"passed"}');
handle('{"progress":73.2}');
handle('{"group":"stub implementation with one arg","description":"execs the block with that arg when called","status":"passed"}');
handle('{"progress":73.2}');
handle('{"group":"stub implementation with variable args","description":"execs the block when called","status":"passed"}');
handle('{"progress":73.3}');
handle('{"group":"A method stub","description":"should ignore when expected message is received","status":"passed"}');
handle('{"progress":73.4}');
handle('{"group":"A method stub","description":"should ignore when message is received with args","status":"passed"}');
handle('{"progress":73.4}');
handle('{"group":"A method stub","description":"should ignore when expected message is not received","status":"passed"}');
handle('{"progress":73.5}');
handle('{"group":"A method stub","description":"should handle multiple stubbed methods","status":"passed"}');
handle('{"progress":73.6}');
handle('{"group":"A method stub","description":"should clear itself when verified","status":"passed"}');
handle('{"progress":73.6}');
handle('{"group":"A method stub","description":"should return values in order to consecutive calls","status":"passed"}');
handle('{"progress":73.7}');
handle('{"group":"A method stub","description":"should keep returning last value in consecutive calls","status":"passed"}');
handle('{"progress":73.8}');
handle('{"group":"A method stub","description":"should revert to original instance method if there is one","status":"passed"}');
handle('{"progress":73.9}');
handle('{"group":"A method stub","description":"should revert to original class method if there is one","status":"passed"}');
handle('{"progress":73.9}');
handle('{"group":"A method stub","description":"should yield a specified object","status":"passed"}');
handle('{"progress":74.0}');
handle('{"group":"A method stub","description":"should yield multiple times with multiple calls to and_yield","status":"passed"}');
handle('{"progress":74.1}');
handle('{"group":"A method stub","description":"should yield a specified object and return another specified object","status":"passed"}');
handle('{"progress":74.1}');
handle('{"group":"A method stub","description":"should throw when told to","status":"passed"}');
handle('{"progress":74.2}');
handle('{"group":"A method stub","description":"should override a pre-existing stub","status":"passed"}');
handle('{"progress":74.3}');
handle('{"group":"A method stub","description":"should limit ","status":"passed"}');
handle('{"progress":74.3}');
handle('{"group":"A method stub","description":"calculates return value by executing block passed to #and_return","status":"passed"}');
handle('{"progress":74.4}');
handle('{"group":"A method stub using stub!","description":"should return expected value when expected message is received","status":"passed"}');
handle('{"progress":74.5}');
handle('{"group":"A method stub using stub","description":"should return expected value when expected message is received","status":"passed"}');
handle('{"progress":74.5}');
handle('{"group":"A method stub with args","description":"should not complain if not called","status":"passed"}');
handle('{"progress":74.6}');
handle('{"group":"A method stub with args","description":"should not complain if called with arg","status":"passed"}');
handle('{"progress":74.7}');
handle('{"group":"A method stub with args","description":"should complain if called with no arg","status":"passed"}');
handle('{"progress":74.7}');
handle('{"group":"A method stub with args","description":"should complain if called with other arg","status":"passed"}');
handle('{"progress":74.8}');
handle('{"group":"A method stub with args","description":"should not complain if also mocked w/ different args","status":"passed"}');
handle('{"progress":74.9}');
handle('{"group":"A method stub with args","description":"should complain if also mocked w/ different args AND called w/ a 3rd set of args","status":"passed"}');
handle('{"progress":75.0}');
handle('{"group":"A method stub with args","description":"should support options","status":"passed"}');
handle('{"progress":75.0}');
handle('{"group":"A method stub with args","description":"should use \'Stub\' in the failure message","status":"passed"}');
handle('{"progress":75.1}');
handle('{"group":"Example with stubbed and then called message","description":"fails if the message is expected and then subsequently not called again","status":"passed"}');
handle('{"progress":75.2}');
handle('{"group":"Example with stubbed and then called message","description":"outputs arguments of all similar calls","status":"passed"}');
handle('{"progress":75.2}');
handle('{"group":"TwiceCounts","description":"twice should fail when call count is higher than expected","status":"passed"}');
handle('{"progress":75.3}');
handle('{"group":"TwiceCounts","description":"twice should fail when call count is lower than expected","status":"passed"}');
handle('{"progress":75.4}');
handle('{"group":"TwiceCounts","description":"twice should fail when called twice with wrong args on the first call","status":"passed"}');
handle('{"progress":75.4}');
handle('{"group":"TwiceCounts","description":"twice should fail when called twice with wrong args on the second call","status":"passed"}');
handle('{"progress":75.5}');
handle('{"group":"TwiceCounts","description":"twice should pass when called twice","status":"passed"}');
handle('{"progress":75.6}');
handle('{"group":"TwiceCounts","description":"twice should pass when called twice with specified args","status":"passed"}');
handle('{"progress":75.6}');
handle('{"group":"TwiceCounts","description":"twice should pass when called twice with unspecified args","status":"passed"}');
handle('{"progress":75.7}');
handle('{"group":"Spec::Mocks::Mock unstubbing a mock object with a stub","description":"should remove the stub","status":"passed"}');
handle('{"progress":75.8}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should raise a NoMethodError if the message is called after unstubbing","status":"passed"}');
handle('{"progress":75.8}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should only clear the stub specified","status":"passed"}');
handle('{"progress":75.9}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should no longer respond_to? the method","status":"passed"}');
handle('{"progress":76.0}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should unstub using a string (should convert the string to a symbol)","status":"passed"}');
handle('{"progress":76.0}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should restore a previous method definition","status":"passed"}');
handle('{"progress":76.1}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should have unstub as an alias of unstub!","status":"passed"}');
handle('{"progress":76.2}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should raise a MockExpectationError if it is not stubbed","status":"passed"}');
handle('{"progress":76.3}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should raise a MockExpectationError if it was already unstubbed","status":"passed"}');
handle('{"progress":76.3}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should use the correct message name in the error","status":"passed"}');
handle('{"progress":76.4}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should raise a MockExpectationError if the method is defined, but not stubbed","status":"passed"}');
handle('{"progress":76.5}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should be able to restub a after unstubbing","status":"passed"}');
handle('{"progress":76.5}');
handle('{"group":"Spec::Mocks::Mock unstubbing a real object with a stub","description":"should remove only the first stub if multiple stubs have been defined","status":"passed"}');
handle('{"progress":76.6}');
handle('{"group":"The bin/spec script","description":"should have no warnings","status":"passed"}');
handle('{"progress":76.7}');
handle('{"group":"The bin/spec script","description":"should show the help w/ no args","status":"passed"}');
handle('{"progress":76.7}');
handle('{"group":"Spec::Rake::SpecTask","description":"should execute rake\'s ruby path by default","status":"passed"}');
handle('{"progress":76.8}');
handle('{"group":"Spec::Rake::SpecTask","description":"should execute the command with system if ruby_cmd is specified","status":"passed"}');
handle('{"progress":76.9}');
handle('{"group":"Spec::Rake::SpecTask","description":"should execute the ruby_cmd path if specified","status":"passed"}');
handle('{"progress":76.9}');
handle('{"group":"Spec::Rake::SpecTask","description":"should produce a deprecation warning if the out option is used","status":"passed"}');
handle('{"progress":77.0}');
handle('{"group":"Spec::Rake::SpecTask","description":"should produce an error if failure_message is set and the command fails","status":"passed"}');
handle('{"progress":77.1}');
handle('{"group":"Spec::Rake::SpecTask","description":"should raise if fail_on_error is set and the command fails","status":"passed"}');
handle('{"progress":77.1}');
handle('{"group":"Spec::Rake::SpecTask","description":"should not raise if fail_on_error is not set and the command fails","status":"passed"}');
handle('{"progress":77.2}');
handle('{"group":"Spec::Rake::SpecTask with ENV[\'SPEC\'] set","description":"should use the provided file list","status":"passed"}');
handle('{"progress":77.3}');
handle('{"group":"Spec::Rake::SpecTask with the rcov option","description":"should create a clobber_rcov task","status":"passed"}');
handle('{"progress":77.4}');
handle('{"group":"Spec::Rake::SpecTask with the rcov option","description":"should setup the clobber_rcov task to remove the rcov directory","status":"passed"}');
handle('{"progress":77.4}');
handle('{"group":"Spec::Rake::SpecTask with the rcov option","description":"should make the clobber task depend on clobber_rcov","status":"passed"}');
handle('{"progress":77.5}');
handle('{"group":"Spec::Rake::SpecTask with the rcov option","description":"should make the rcov task depend on clobber_rcov","status":"passed"}');
handle('{"progress":77.6}');
handle('{"group":"Spec::Rake::SpecTask with the rcov option","description":"creates an rcov options list","status":"passed"}');
handle('{"progress":77.6}');
handle('{"group":"Spec::Runner::ClassAndArgumentsParser.parse","description":"should use a single : to separate class names from arguments","status":"passed"}');
handle('{"progress":77.7}');
handle('{"group":"Spec::Runner::ClassAndArgumentsParser.parse","description":"should raise an error when passed an empty string","status":"passed"}');
handle('{"progress":77.8}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should run directory","status":"passed"}');
handle('{"progress":77.8}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should run file","status":"passed"}');
handle('{"progress":77.9}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should raise when file does not exist","status":"passed"}');
handle('{"progress":78.0}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should return true when in --generate-options mode","status":"passed"}');
handle('{"progress":78.0}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should dump even if Interrupt exception is occurred","status":"passed"}');
handle('{"progress":78.1}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should heckle when options have heckle_runner","status":"passed"}');
handle('{"progress":78.2}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should run examples backwards if options.reverse is true","status":"passed"}');
handle('{"progress":78.2}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"should pass its ExampleGroup to the reporter","status":"passed"}');
handle('{"progress":78.3}');
handle('{"group":"Spec::Runner::CommandLine.run","description":"runs only selected Examples when options.examples is set","status":"passed"}');
handle('{"progress":78.4}');
handle('{"group":"Spec::Runner::Configuration#mock_with","description":"should default mock framework to rspec","status":"passed"}');
handle('{"progress":78.5}');
handle('{"group":"Spec::Runner::Configuration#mock_with","description":"should set rspec mocking explicitly","status":"passed"}');
handle('{"progress":78.5}');
handle('{"group":"Spec::Runner::Configuration#mock_with","description":"should set mocha","status":"passed"}');
handle('{"progress":78.6}');
handle('{"group":"Spec::Runner::Configuration#mock_with","description":"should set flexmock","status":"passed"}');
handle('{"progress":78.7}');
handle('{"group":"Spec::Runner::Configuration#mock_with","description":"should set rr","status":"passed"}');
handle('{"progress":78.7}');
handle('{"group":"Spec::Runner::Configuration#mock_with","description":"should set an arbitrary adapter module","status":"passed"}');
handle('{"progress":78.8}');
handle('{"group":"Spec::Runner::Configuration#include","description":"should include the submitted module in ExampleGroup subclasses","status":"passed"}');
handle('{"progress":78.9}');
handle('{"group":"Spec::Runner::Configuration#include","description":"should scope modules to be included for a specific type","status":"passed"}');
handle('{"progress":78.9}');
handle('{"group":"Spec::Runner::Configuration#include","description":"should not include modules in a type they are not intended for","status":"passed"}');
handle('{"progress":79.0}');
handle('{"group":"Spec::Runner::Configuration#include","description":"accepts an Array of types","status":"passed"}');
handle('{"progress":79.1}');
handle('{"group":"Spec::Runner::Configuration#extend","description":"should extend all groups","status":"passed"}');
handle('{"progress":79.1}');
handle('{"group":"Spec::Runner::Configuration#extend","description":"should extend specified groups","status":"passed"}');
handle('{"progress":79.2}');
handle('{"group":"Spec::Runner::Configuration#extend","description":"should not extend non-specified groups","status":"passed"}');
handle('{"progress":79.3}');
handle('{"group":"Spec::Runner::Configuration ordering methods: #prepend_before","description":"prepends the before block on all instances of the passed in type","status":"passed"}');
handle('{"progress":79.3}');
handle('{"group":"Spec::Runner::Configuration ordering methods: #append_before","description":"calls append_before on the type","status":"passed"}');
handle('{"progress":79.4}');
handle('{"group":"Spec::Runner::Configuration ordering methods: #prepend_after","description":"prepends the after block on all instances of the passed in type","status":"passed"}');
handle('{"progress":79.5}');
handle('{"group":"Spec::Runner::Configuration ordering methods: #append_after","description":"calls append_after on the type","status":"passed"}');
handle('{"progress":79.6}');
handle('{"group":"Spec::Runner::Configuration ordering methods: #ignore_backtrace_patterns","description":"adds patterns to ignore in backtrace","status":"passed"}');
handle('{"progress":79.6}');
handle('{"group":"Spec::Runner::Configuration ordering methods: #predicate_matchers (DEPRECATED)","description":"is deprecated","status":"passed"}');
handle('{"progress":79.7}');
handle('{"group":"Spec::Runner::DrbCommandLine without server running","description":"prints error","status":"passed"}');
handle('{"progress":79.8}');
handle('{"group":"Spec::Runner::DrbCommandLine without server running","description":"returns nil","status":"passed"}');
handle('{"progress":79.8}');
handle('{"group":"Spec::Runner::DrbCommandLine with server running","description":"returns true","status":"passed"}');
handle('{"progress":79.9}');
handle('{"group":"Spec::Runner::DrbCommandLine with server running","description":"should run against local server","status":"passed"}');
handle('{"progress":80.0}');
handle('{"group":"Spec::Runner::DrbCommandLine with server running","description":"should output green colorized text when running with --colour option","status":"passed"}');
handle('{"progress":80.0}');
handle('{"group":"Spec::Runner::DrbCommandLine with server running","description":"should output red colorized text when running with -c option","status":"passed"}');
handle('{"progress":80.1}');
handle('{"group":"Spec::Runner::ExampleGroupRunner#load_files","description":"should load UTF-8 encoded files","status":"passed"}');
handle('{"progress":80.2}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #start with 1 argument","status":"passed"}');
handle('{"progress":80.2}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #example_group_started with 1 argument","status":"passed"}');
handle('{"progress":80.3}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #example_started with 1 argument","status":"passed"}');
handle('{"progress":80.4}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #example_pending with -3 arguments","status":"passed"}');
handle('{"progress":80.4}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #example_passed with 1 argument","status":"passed"}');
handle('{"progress":80.5}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #example_failed with 3 arguments","status":"passed"}');
handle('{"progress":80.6}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #start_dump with 0 arguments","status":"passed"}');
handle('{"progress":80.7}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #dump_failure with 2 arguments","status":"passed"}');
handle('{"progress":80.7}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #dump_summary with 4 arguments","status":"passed"}');
handle('{"progress":80.8}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #dump_pending with 0 arguments","status":"passed"}');
handle('{"progress":80.9}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"should respond to #close with 0 arguments","status":"passed"}');
handle('{"progress":80.9}');
handle('{"group":"Spec::Runner::Formatter::BaseFormatter","description":"deprecates add_example_group","status":"passed"}');
handle('{"progress":81.0}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter","description":"should create the directory contained in WHERE if it does not exist","status":"passed"}');
handle('{"progress":81.1}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter (deprecations)#colourise","description":"warns when subclasses call colourise","status":"passed"}');
handle('{"progress":81.1}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter (deprecations)#colourise","description":"delegates to colorize_failure","status":"passed"}');
handle('{"progress":81.2}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter (deprecations)#magenta","description":"warns when subclasses call magenta","status":"passed"}');
handle('{"progress":81.3}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter (deprecations)#magenta","description":"delegates to red","status":"passed"}');
handle('{"progress":81.3}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter#colour (protected)","description":"does not colorize when output_to_file? returns true","status":"passed"}');
handle('{"progress":81.4}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter#colour (protected)","description":"colorizes when colour? and output_to_tty? return true","status":"passed"}');
handle('{"progress":81.5}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter#colour (protected)","description":"colorizes when ENV[\'RSPEC_COLOR\'] is set even if colour? and output_to_tty? return false","status":"passed"}');
handle('{"progress":81.5}');
handle('{"group":"Spec::Runner::Formatter::BaseTextFormatter#colour (protected)","description":"colorizes when autospec? is true even if colour? and output_to_tty? return false","status":"passed"}');
handle('{"progress":81.6}');
handle('{"group":"Spec::Runner::Formatter::FailingExampleGroupsFormatter","description":"should add example name for each failure","status":"passed"}');
handle('{"progress":81.7}');
handle('{"group":"Spec::Runner::Formatter::FailingExampleGroupsFormatter","description":"should delimit ExampleGroup superclass descriptions with :","status":"passed"}');
handle('{"progress":81.7}');
handle('{"group":"Spec::Runner::Formatter::FailingExampleGroupsFormatter","description":"should remove druby url, which is used by Spec::Distributed","status":"passed"}');
handle('{"progress":81.8}');
handle('{"group":"Spec::Runner::Formatter::FailingExamplesFormatter","description":"should add example name for each failure","status":"passed"}');
handle('{"progress":81.9}');
handle('{"group":"Spec::Runner::Formatter::HtmlFormatter","description":"should have method_missing as private","status":"passed"}');
handle('{"progress":82.0}');
handle('{"group":"Spec::Runner::Formatter::HtmlFormatter","description":"should not respond_to? method_missing (because it\'s private)","status":"passed"}');
handle('{"progress":82.0}');
handle('{"group":"Spec::Runner::Formatter::HtmlFormatter","description":"should respond_to? all messages","status":"passed"}');
handle('{"progress":82.1}');
handle('{"group":"Spec::Runner::Formatter::HtmlFormatter","description":"should respond_to? anything, when given the private flag","status":"passed"}');
handle('{"progress":82.2}');
handle('{"group":"Spec::Runner::Formatter::HtmlFormatter","description":"should produce HTML identical to the one we designed manually with --diff","status":"passed"}');
handle('{"progress":82.2}');
handle('{"group":"Spec::Runner::Formatter::HtmlFormatter","description":"should produce HTML identical to the one we designed manually with --dry-run","status":"passed"}');
handle('{"progress":82.3}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#dump_summary","description":"should produce standard summary without pending when pending has a 0 count","status":"passed"}');
handle('{"progress":82.4}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#dump_summary","description":"should produce standard summary","status":"passed"}');
handle('{"progress":82.4}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup has a nested description when ExampleGroup has no parents with nested description","description":"should push ExampleGroup name","status":"passed"}');
handle('{"progress":82.5}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup has a nested description when ExampleGroup has one parent with nested description and parent ExampleGroups have not been printed","description":"should push ExampleGroup name with two spaces of indentation","status":"passed"}');
handle('{"progress":82.6}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup has a nested description when ExampleGroup has one parent with nested description and parent ExampleGroups have been printed","description":"should print only the indented ExampleGroup","status":"passed"}');
handle('{"progress":82.6}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup has a nested description when ExampleGroup has two parents with nested description and parent ExampleGroups have not been printed","description":"should print the entire nested ExampleGroup heirarchy","status":"passed"}');
handle('{"progress":82.7}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup has a nested description when ExampleGroup has two parents with nested description and parent ExampleGroups have been printed","description":"should print only the indented ExampleGroup","status":"passed"}');
handle('{"progress":82.8}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup nested description is blank and parent ExampleGroups have not been printed","description":"should render only the parent ExampleGroup","status":"passed"}');
handle('{"progress":82.8}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup nested description is blank and parent ExampleGroups have been printed","description":"should not render anything","status":"passed"}');
handle('{"progress":82.9}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_group_started when ExampleGroup nested description is blank","description":"should not render anything","status":"passed"}');
handle('{"progress":83.0}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_failed where ExampleGroup has no superclasss with a description when having an error","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":83.1}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_failed where ExampleGroup has no superclasss with a description when having an expectation failure","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":83.1}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_failed where ExampleGroup has two superclasses with a description when having an error","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":83.2}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_failed where ExampleGroup has two superclasses with a description when having an expectation","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":83.3}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#start","description":"should push nothing on start","status":"passed"}');
handle('{"progress":83.3}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#start_dump","description":"should push nothing on start dump","status":"passed"}');
handle('{"progress":83.4}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_passed","description":"should push passing spec name","status":"passed"}');
handle('{"progress":83.5}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_pending","description":"should push pending example name and message","status":"passed"}');
handle('{"progress":83.5}');
handle('{"group":"Spec::Runner::Formatter::NestedTextFormatter where ExampleGroup has no superclass with a description#example_pending","description":"should dump pending","status":"passed"}');
handle('{"progress":83.6}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should have method_missing as private","status":"passed"}');
handle('{"progress":83.7}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should not respond_to? method_missing (because it\'s private)","status":"passed"}');
handle('{"progress":83.7}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should respond_to? all messages","status":"passed"}');
handle('{"progress":83.8}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should respond_to? anything, when given the private flag","status":"passed"}');
handle('{"progress":83.9}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should print a heading","status":"passed"}');
handle('{"progress":83.9}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should record the current time when starting a new example","status":"passed"}');
handle('{"progress":84.0}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should correctly record a passed example","status":"passed"}');
handle('{"progress":84.1}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should sort the results in descending order","status":"passed"}');
handle('{"progress":84.2}');
handle('{"group":"Spec::Runner::Formatter::ProfileFormatter","description":"should print the top 10 results","status":"passed"}');
handle('{"progress":84.2}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should have method_missing as private","status":"passed"}');
handle('{"progress":84.3}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should not respond_to? method_missing (because it\'s private)","status":"passed"}');
handle('{"progress":84.4}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should respond_to? all messages","status":"passed"}');
handle('{"progress":84.4}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should respond_to? anything, when given the private flag","status":"passed"}');
handle('{"progress":84.5}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should produce line break on start dump","status":"passed"}');
handle('{"progress":84.6}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should produce standard summary without pending when pending has a 0 count","status":"passed"}');
handle('{"progress":84.6}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should produce standard summary","status":"passed"}');
handle('{"progress":84.7}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should push green dot for passing spec","status":"passed"}');
handle('{"progress":84.8}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should push red F for failure spec","status":"passed"}');
handle('{"progress":84.8}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should push red F for error spec","status":"passed"}');
handle('{"progress":84.9}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should push blue F for fixed pending spec","status":"passed"}');
handle('{"progress":85.0}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should push nothing on start","status":"passed"}');
handle('{"progress":85.0}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should ensure two \':\' in the first backtrace","status":"passed"}');
handle('{"progress":85.1}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter","description":"should dump pending with file and line number","status":"passed"}');
handle('{"progress":85.2}');
handle('{"group":"ProgressBarFormatter outputting to custom out","description":"should not throw NoMethodError on output_to_tty?","status":"passed"}');
handle('{"progress":85.3}');
handle('{"group":"Spec::Runner::Formatter::ProgressBarFormatter dry run","description":"should not produce summary on dry run","status":"passed"}');
handle('{"progress":85.3}');
handle('{"group":"Spec::Runner::Formatter::SnippetExtractor","description":"should fall back on a default message when it doesn\'t understand a line","status":"passed"}');
handle('{"progress":85.4}');
handle('{"group":"Spec::Runner::Formatter::SnippetExtractor","description":"should fall back on a default message when it doesn\'t find the file","status":"passed"}');
handle('{"progress":85.5}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#dump_summary","description":"should produce standard summary without pending when pending has a 0 count","status":"passed"}');
handle('{"progress":85.5}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#dump_summary","description":"should produce standard summary","status":"passed"}');
handle('{"progress":85.6}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_group_started","description":"should push ExampleGroup name","status":"passed"}');
handle('{"progress":85.7}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_failed where ExampleGroup has no superclasss with a description when having an error","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":85.7}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_failed where ExampleGroup has no superclasss with a description when having an expectation failure","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":85.8}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_failed where ExampleGroup has two superclasses with a description when having an error","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":85.9}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_failed where ExampleGroup has two superclasses with a description when having an expectation","description":"should push failing spec name and failure number","status":"passed"}');
handle('{"progress":85.9}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#start","description":"should push nothing on start","status":"passed"}');
handle('{"progress":86.0}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#start_dump","description":"should push nothing on start dump","status":"passed"}');
handle('{"progress":86.1}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_passed","description":"should push passing spec name","status":"passed"}');
handle('{"progress":86.1}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_pending","description":"should push pending example name and message","status":"passed"}');
handle('{"progress":86.2}');
handle('{"group":"Spec::Runner::Formatter::SpecdocFormatter where ExampleGroup has no superclasss with a description#example_pending","description":"should dump pending","status":"passed"}');
handle('{"progress":86.3}');
handle('{"group":"Spec::Runner::Formatter::TextMateFormatter functional spec using --diff","description":"should produce HTML identical to the one we designed manually with --diff","status":"passed"}');
handle('{"progress":86.4}');
handle('{"group":"Spec::Runner::Formatter::TextMateFormatter functional spec using --dry-run","description":"should produce HTML identical to the one we designed manually with --dry-run","status":"passed"}');
handle('{"progress":86.4}');
handle('{"group":"HeckleRunner","description":"should heckle all methods in all classes in a module","status":"passed"}');
handle('{"progress":86.5}');
handle('{"group":"HeckleRunner","description":"should heckle all methods in a class","status":"passed"}');
handle('{"progress":86.6}');
handle('{"group":"HeckleRunner","description":"should fail heckling when the class is not found","status":"passed"}');
handle('{"progress":86.6}');
handle('{"group":"HeckleRunner","description":"should heckle specific method in a class (with #)","status":"passed"}');
handle('{"progress":86.7}');
handle('{"group":"HeckleRunner","description":"should heckle specific method in a class (with .)","status":"passed"}');
handle('{"progress":86.8}');
handle('{"group":"Heckler","description":"should say yes to tests_pass? if specs pass","status":"passed"}');
handle('{"progress":86.8}');
handle('{"group":"Heckler","description":"should say no to tests_pass? if specs fail","status":"passed"}');
handle('{"progress":86.9}');
handle('{"group":"Heckler","description":"should run examples on tests_pass?","status":"passed"}');
handle('{"progress":87.0}');
handle('{"group":"LineNumberQuery","description":"should find spec name for \'specify\' at same line","status":"passed"}');
handle('{"progress":87.0}');
handle('{"group":"LineNumberQuery","description":"should find spec name for \'specify\' at end of spec line","status":"passed"}');
handle('{"progress":87.1}');
handle('{"group":"LineNumberQuery","description":"should find context for \'context\' above all specs","status":"passed"}');
handle('{"progress":87.2}');
handle('{"group":"LineNumberQuery","description":"should find spec name for \'it\' at same line","status":"passed"}');
handle('{"progress":87.2}');
handle('{"group":"LineNumberQuery","description":"should find spec name for \'it\' at end of spec line","status":"passed"}');
handle('{"progress":87.3}');
handle('{"group":"LineNumberQuery","description":"should find context for \'describe\' above all specs","status":"passed"}');
handle('{"progress":87.4}');
handle('{"group":"LineNumberQuery","description":"should find nearest example name between examples","status":"passed"}');
handle('{"progress":87.5}');
handle('{"group":"LineNumberQuery","description":"should find nothing outside a context","status":"passed"}');
handle('{"progress":87.5}');
handle('{"group":"LineNumberQuery","description":"should find context name for type","status":"passed"}');
handle('{"progress":87.6}');
handle('{"group":"LineNumberQuery","description":"should find context and spec name for type","status":"passed"}');
handle('{"progress":87.7}');
handle('{"group":"LineNumberQuery","description":"should find context and description for type","status":"passed"}');
handle('{"progress":87.7}');
handle('{"group":"LineNumberQuery","description":"should find context and description and example for type","status":"passed"}');
handle('{"progress":87.8}');
handle('{"group":"LineNumberQuery","description":"should find context and description for type with modifications","status":"passed"}');
handle('{"progress":87.9}');
handle('{"group":"LineNumberQuery","description":"should find context and described and example for type with modifications","status":"passed"}');
handle('{"progress":87.9}');
handle('{"group":"LineNumberQuery","description":"should find example group","status":"passed"}');
handle('{"progress":88.0}');
handle('{"group":"LineNumberQuery","description":"should find example","status":"passed"}');
handle('{"progress":88.1}');
handle('{"group":"LineNumberQuery","description":"should find nested example","status":"passed"}');
handle('{"progress":88.1}');
handle('{"group":"LineNumberQuery","description":"should handle paths which contain colons","status":"passed"}');
handle('{"progress":88.2}');
handle('{"group":"LineNumberQuery","description":"should handle paths which contain colons and backslashes","status":"passed"}');
handle('{"progress":88.3}');
handle('{"group":"LineNumberQuery","description":"ignores example group base classes which have no location","status":"passed"}');
handle('{"progress":88.3}');
handle('{"group":"LineNumberQuery#example_line_for","description":"should find example declared on same line","status":"passed"}');
handle('{"progress":88.4}');
handle('{"group":"LineNumberQuery#example_line_for","description":"should find example declared on the line above, while still inside the example","status":"passed"}');
handle('{"progress":88.5}');
handle('{"group":"LineNumberQuery#example_line_for","description":"should find example declared from empty line below the example","status":"passed"}');
handle('{"progress":88.5}');
handle('{"group":"LineNumberQuery#example_line_for","description":"should find the group declared on the same line","status":"passed"}');
handle('{"progress":88.6}');
handle('{"group":"LineNumberQuery#example_line_for","description":"should find the group declared above the first example","status":"passed"}');
handle('{"progress":88.7}');
handle('{"group":"Spec::Runner::NoisyBacktraceTweaker","description":"gracefully handles nil backtrace","status":"passed"}');
handle('{"progress":88.8}');
handle('{"group":"Spec::Runner::NoisyBacktraceTweaker","description":"cleans up double slashes","status":"passed"}');
handle('{"progress":88.8}');
handle('{"group":"Spec::Runner::NoisyBacktraceTweaker","description":"preserves lines in lib/spec","status":"passed"}');
handle('{"progress":88.9}');
handle('{"group":"Spec::Runner::NoisyBacktraceTweaker","description":"preserves lines in spec/","status":"passed"}');
handle('{"progress":89.0}');
handle('{"group":"Spec::Runner::NoisyBacktraceTweaker","description":"preserves lines in bin/spec","status":"passed"}');
handle('{"progress":89.0}');
handle('{"group":"Spec::Runner::NoisyBacktraceTweaker","description":"ignores custom patterns","status":"passed"}');
handle('{"progress":89.1}');
handle('{"group":"OptionParser","description":"should leave the submitted argv alone","status":"passed"}');
handle('{"progress":89.2}');
handle('{"group":"OptionParser","description":"should accept files to include","status":"passed"}');
handle('{"progress":89.2}');
handle('{"group":"OptionParser","description":"should accept debugger option","status":"passed"}');
handle('{"progress":89.3}');
handle('{"group":"OptionParser","description":"should accept -u form of debugger option","status":"passed"}');
handle('{"progress":89.4}');
handle('{"group":"OptionParser","description":"should turn off the debugger option if drb is specified later","status":"passed"}');
handle('{"progress":89.4}');
handle('{"group":"OptionParser","description":"should turn off the debugger option if drb is specified first","status":"passed"}');
handle('{"progress":89.5}');
handle('{"group":"OptionParser","description":"should accept dry run option","status":"passed"}');
handle('{"progress":89.6}');
handle('{"group":"OptionParser","description":"should eval and use custom formatter when none of the builtins","status":"passed"}');
handle('{"progress":89.6}');
handle('{"group":"OptionParser","description":"should support formatters with relative and absolute paths, even on windows","status":"passed"}');
handle('{"progress":89.7}');
handle('{"group":"OptionParser","description":"should not be verbose by default","status":"passed"}');
handle('{"progress":89.8}');
handle('{"group":"OptionParser","description":"should print help to stdout if no args and spec_comand?","status":"passed"}');
handle('{"progress":89.9}');
handle('{"group":"OptionParser","description":"should not print help to stdout if no args and NOT spec_command?","status":"passed"}');
handle('{"progress":89.9}');
handle('{"group":"OptionParser","description":"should print help to stdout","status":"passed"}');
handle('{"progress":90.0}');
handle('{"group":"OptionParser","description":"should print instructions about how to require missing formatter","status":"passed"}');
handle('{"progress":90.1}');
handle('{"group":"OptionParser","description":"should print version to stdout","status":"passed"}');
handle('{"progress":90.1}');
handle('{"group":"OptionParser","description":"should require file when require specified","status":"passed"}');
handle('{"progress":90.2}');
handle('{"group":"OptionParser","description":"should support c option","status":"passed"}');
handle('{"progress":90.3}');
handle('{"group":"OptionParser","description":"should support queens colour option","status":"passed"}');
handle('{"progress":90.3}');
handle('{"group":"OptionParser","description":"should support us color option","status":"passed"}');
handle('{"progress":90.4}');
handle('{"group":"OptionParser","description":"should support single example with -e option","status":"passed"}');
handle('{"progress":90.5}');
handle('{"group":"OptionParser","description":"should support single example with -s option (will be removed when autotest supports -e)","status":"passed"}');
handle('{"progress":90.5}');
handle('{"group":"OptionParser","description":"should support single example with --example option","status":"passed"}');
handle('{"progress":90.6}');
handle('{"group":"OptionParser","description":"should read several example names from file if --example is given an existing file name","status":"passed"}');
handle('{"progress":90.7}');
handle('{"group":"OptionParser","description":"should read no examples if given an empty file","status":"passed"}');
handle('{"progress":90.7}');
handle('{"group":"OptionParser","description":"should use html formatter when format is h","status":"passed"}');
handle('{"progress":90.8}');
handle('{"group":"OptionParser","description":"should use html formatter when format is html","status":"passed"}');
handle('{"progress":90.9}');
handle('{"group":"OptionParser","description":"should use silent formatter when format is s","status":"passed"}');
handle('{"progress":91.0}');
handle('{"group":"OptionParser","description":"should use silent formatter when format is silent","status":"passed"}');
handle('{"progress":91.0}');
handle('{"group":"OptionParser","description":"should use html formatter with explicit output when format is html:test.html","status":"passed"}');
handle('{"progress":91.1}');
handle('{"group":"OptionParser","description":"should use noisy backtrace tweaker with b option","status":"passed"}');
handle('{"progress":91.2}');
handle('{"group":"OptionParser","description":"should use noisy backtrace tweaker with backtrace option","status":"passed"}');
handle('{"progress":91.2}');
handle('{"group":"OptionParser","description":"should use quiet backtrace tweaker by default","status":"passed"}');
handle('{"progress":91.3}');
handle('{"group":"OptionParser","description":"should use specdoc formatter when format is s","status":"passed"}');
handle('{"progress":91.4}');
handle('{"group":"OptionParser","description":"should use specdoc formatter when format is specdoc","status":"passed"}');
handle('{"progress":91.4}');
handle('{"group":"OptionParser","description":"should use nested text formatter when format is s","status":"passed"}');
handle('{"progress":91.5}');
handle('{"group":"OptionParser","description":"should use nested text formatter when format is nested","status":"passed"}');
handle('{"progress":91.6}');
handle('{"group":"OptionParser","description":"should support diff option when format is not specified","status":"passed"}');
handle('{"progress":91.6}');
handle('{"group":"OptionParser","description":"should use unified diff format option when format is unified","status":"passed"}');
handle('{"progress":91.7}');
handle('{"group":"OptionParser","description":"should use context diff format option when format is context","status":"passed"}');
handle('{"progress":91.8}');
handle('{"group":"OptionParser","description":"should use custom diff format option when format is a custom format","status":"passed"}');
handle('{"progress":91.8}');
handle('{"group":"OptionParser","description":"should print instructions about how to fix missing differ","status":"passed"}');
handle('{"progress":91.9}');
handle('{"group":"OptionParser","description":"should heckle when --heckle is specified (and platform is not windows)","status":"passed"}');
handle('{"progress":92.0}');
handle('{"group":"OptionParser","description":"should read options from file when --options is specified","status":"passed"}');
handle('{"progress":92.1}');
handle('{"group":"OptionParser","description":"should default the formatter to ProgressBarFormatter when using options file","status":"passed"}');
handle('{"progress":92.1}');
handle('{"group":"OptionParser","description":"should run parse drb after parsing options","status":"passed"}');
handle('{"progress":92.2}');
handle('{"group":"OptionParser","description":"should send all the arguments other than --drb back to the parser after parsing options","status":"passed"}');
handle('{"progress":92.3}');
handle('{"group":"OptionParser","description":"runs specs locally if no drb is running when --drb is specified","status":"passed"}');
handle('{"progress":92.3}');
handle('{"group":"OptionParser","description":"says its running specs locally if no drb is running when --drb is specified","status":"passed"}');
handle('{"progress":92.4}');
handle('{"group":"OptionParser","description":"does not run specs locally if drb is running when --drb is specified","status":"passed"}');
handle('{"progress":92.5}');
handle('{"group":"OptionParser","description":"should read spaced and multi-line options from file when --options is specified","status":"passed"}');
handle('{"progress":92.5}');
handle('{"group":"OptionParser","description":"should save config to file when --generate-options is specified","status":"passed"}');
handle('{"progress":92.6}');
handle('{"group":"OptionParser","description":"should save config to file when -G is specified","status":"passed"}');
handle('{"progress":92.7}');
handle('{"group":"OptionParser","description":"when --drb is specified, calls DrbCommandLine all of the other ARGV arguments","status":"passed"}');
handle('{"progress":92.7}');
handle('{"group":"OptionParser","description":"should reverse spec order when --reverse is specified","status":"passed"}');
handle('{"progress":92.8}');
handle('{"group":"OptionParser","description":"should set an mtime comparator when --loadby mtime","status":"passed"}');
handle('{"progress":92.9}');
handle('{"group":"OptionParser","description":"should use the standard runner by default","status":"passed"}');
handle('{"progress":92.9}');
handle('{"group":"OptionParser","description":"should use a custom runner when given","status":"passed"}');
handle('{"progress":93.0}');
handle('{"group":"OptionParser","description":"should use a custom runner with extra options","status":"passed"}');
handle('{"progress":93.1}');
handle('{"group":"OptionParser","description":"sets options.autospec to true with --autospec","status":"passed"}');
handle('{"progress":93.2}');
handle('{"group":"OptionParser with fakefs","description":"should not use colour by default","status":"passed"}');
handle('{"progress":93.2}');
handle('{"group":"OptionParser with fakefs","description":"should use progress bar formatter by default","status":"passed"}');
handle('{"progress":93.3}');
handle('{"group":"OptionParser when attempting a focussed spec with the --line flag","description":"should correctly identify the spec","status":"passed"}');
handle('{"progress":93.4}');
handle('{"group":"OptionParser when attempting a focussed spec with the --line flag","description":"should fail with error message if specified file is a dir","status":"passed"}');
handle('{"progress":93.4}');
handle('{"group":"OptionParser when attempting a focussed spec with the --line flag","description":"should fail with error message if file does not exist","status":"passed"}');
handle('{"progress":93.5}');
handle('{"group":"OptionParser when attempting a focussed spec with the --line flag","description":"should fail with error message if more than one files are specified","status":"passed"}');
handle('{"progress":93.6}');
handle('{"group":"OptionParser when attempting a focussed spec with the --line flag","description":"should fail with error message if using simultaneously with --example","status":"passed"}');
handle('{"progress":93.6}');
handle('{"group":"OptionParser when attempting a focussed spec with the colon syntax (filename:LINE_NUMBER)","description":"should strip the line number from the file name","status":"passed"}');
handle('{"progress":93.7}');
handle('{"group":"OptionParser when attempting a focussed spec with the colon syntax (filename:LINE_NUMBER)","description":"should correctly identify the spec","status":"passed"}');
handle('{"progress":93.8}');
handle('{"group":"OptionParser when attempting a focussed spec with the colon syntax (filename:LINE_NUMBER)","description":"should fail with error message if specified file is a dir","status":"passed"}');
handle('{"progress":93.8}');
handle('{"group":"OptionParser when attempting a focussed spec with the colon syntax (filename:LINE_NUMBER)","description":"should fail with error message if file does not exist","status":"passed"}');
handle('{"progress":93.9}');
handle('{"group":"OptionParser when attempting a focussed spec with the colon syntax (filename:LINE_NUMBER)","description":"should fail with error message if more than one files are specified","status":"passed"}');
handle('{"progress":94.0}');
handle('{"group":"OptionParser when attempting a focussed spec with the colon syntax (filename:LINE_NUMBER)","description":"should fail with error message if using simultaneously with --example","status":"passed"}');
handle('{"progress":94.0}');
handle('{"group":"OptionParser implicitly loading spec/spec.opts","description":"uses spec/spec.opts if present","status":"passed"}');
handle('{"progress":94.1}');
handle('{"group":"OptionParser implicitly loading spec/spec.opts","description":"does not try to load spec/spec.opts if not present","status":"passed"}');
handle('{"progress":94.2}');
handle('{"group":"OptionParser implicitly loading spec/spec.opts","description":"uses specified opts if supplied","status":"passed"}');
handle('{"progress":94.2}');
handle('{"group":"Spec::Runner::Options#require_ruby_debug","description":"should require ruby-debug","status":"passed"}');
handle('{"progress":94.3}');
handle('{"group":"Spec::Runner::Options#examples","description":"should default to empty array","status":"passed"}');
handle('{"progress":94.4}');
handle('{"group":"Spec::Runner::Options#include_pattern","description":"should default to \'**/*_spec.rb\'","status":"passed"}');
handle('{"progress":94.5}');
handle('{"group":"Spec::Runner::Options#files_to_load","description":"should load files not following pattern if named explicitly","status":"passed"}');
handle('{"progress":94.5}');
handle('{"group":"Spec::Runner::Options#files_to_load with default --pattern","description":"should load files named _spec.rb","status":"passed"}');
handle('{"progress":94.6}');
handle('{"group":"Spec::Runner::Options#files_to_load with explicit pattern (single)","description":"should load files following pattern","status":"passed"}');
handle('{"progress":94.7}');
handle('{"group":"Spec::Runner::Options#files_to_load with explicit pattern (single)","description":"should load files in directories following pattern","status":"passed"}');
handle('{"progress":94.7}');
handle('{"group":"Spec::Runner::Options#files_to_load with explicit pattern (single)","description":"should not load files in directories not following pattern","status":"passed"}');
handle('{"progress":94.8}');
handle('{"group":"Spec::Runner::Options#files_to_load with explicit pattern (comma,separated,values)","description":"should support comma separated values","status":"passed"}');
handle('{"progress":94.9}');
handle('{"group":"Spec::Runner::Options#files_to_load with explicit pattern (comma,separated,values)","description":"should support comma separated values with spaces","status":"passed"}');
handle('{"progress":94.9}');
handle('{"group":"Spec::Runner::Options#backtrace_tweaker","description":"should default to QuietBacktraceTweaker","status":"passed"}');
handle('{"progress":95.0}');
handle('{"group":"Spec::Runner::Options#backtrace_tweaker","description":"adds custom ignored backtrace patterns","status":"passed"}');
handle('{"progress":95.1}');
handle('{"group":"Spec::Runner::Options#dry_run","description":"should default to false","status":"passed"}');
handle('{"progress":95.1}');
handle('{"group":"Spec::Runner::Options#debug","description":"should default to false","status":"passed"}');
handle('{"progress":95.2}');
handle('{"group":"Spec::Runner::Options#context_lines","description":"should default to 3","status":"passed"}');
handle('{"progress":95.3}');
handle('{"group":"Spec::Runner::Options#parse_diff with nil","description":"should make diff_format unified","status":"passed"}');
handle('{"progress":95.3}');
handle('{"group":"Spec::Runner::Options#parse_diff with nil","description":"should set Spec::Expectations.differ to be a default differ","status":"passed"}');
handle('{"progress":95.4}');
handle('{"group":"Spec::Runner::Options#parse_diff with \'unified\'","description":"should make diff_format unified and uses default differ_class","status":"passed"}');
handle('{"progress":95.5}');
handle('{"group":"Spec::Runner::Options#parse_diff with \'unified\'","description":"should set Spec::Expectations.differ to be a default differ","status":"passed"}');
handle('{"progress":95.6}');
handle('{"group":"Spec::Runner::Options#parse_diff with \'context\'","description":"should make diff_format context and uses default differ_class","status":"passed"}');
handle('{"progress":95.6}');
handle('{"group":"Spec::Runner::Options#parse_diff with \'context\'","description":"should set Spec::Expectations.differ to be a default differ","status":"passed"}');
handle('{"progress":95.7}');
handle('{"group":"Spec::Runner::Options#parse_diff with Custom::Differ","description":"should use custom differ_class","status":"passed"}');
handle('{"progress":95.8}');
handle('{"group":"Spec::Runner::Options#parse_diff with Custom::Differ","description":"should set Spec::Expectations.differ to be a default differ","status":"passed"}');
handle('{"progress":95.8}');
handle('{"group":"Spec::Runner::Options#parse_diff with missing class name","description":"should raise error","status":"passed"}');
handle('{"progress":95.9}');
handle('{"group":"Spec::Runner::Options#parse_example","description":"with argument thats not a file path, sets argument as the example","status":"passed"}');
handle('{"progress":96.0}');
handle('{"group":"Spec::Runner::Options#parse_example","description":"with argument that is a file path, sets examples to contents of the file","status":"passed"}');
handle('{"progress":96.0}');
handle('{"group":"Spec::Runner::Options#examples_should_not_be_run","description":"should cause #run_examples to return true and do nothing","status":"passed"}');
handle('{"progress":96.1}');
handle('{"group":"Spec::Runner::Options debug option specified","description":"should cause ruby_debug to be required and do nothing","status":"passed"}');
handle('{"progress":96.2}');
handle('{"group":"Spec::Runner::Options debug option not specified","description":"should not cause ruby_debug to be required","status":"passed"}');
handle('{"progress":96.2}');
handle('{"group":"Spec::Runner::Options#load_class","description":"should raise error when not class name","status":"passed"}');
handle('{"progress":96.3}');
handle('{"group":"Spec::Runner::Options#reporter","description":"returns a Reporter","status":"passed"}');
handle('{"progress":96.4}');
handle('{"group":"Spec::Runner::Options#number_of_examples when --example is parsed","description":"provides the number of examples parsed instead of the total number of examples collected","status":"passed"}');
handle('{"progress":96.4}');
handle('{"group":"Spec::Runner::Options#add_example_group affecting passed in example_group","description":"runs all examples when options.examples is empty","status":"passed"}');
handle('{"progress":96.5}');
handle('{"group":"Spec::Runner::Options#add_example_group affecting passed in example_group","description":"keeps all example_definitions when options.examples is empty","status":"passed"}');
handle('{"progress":96.6}');
handle('{"group":"Spec::Runner::Options#add_example_group affecting example_group","description":"adds example_group when example_group has example_definitions and is not shared","status":"passed"}');
handle('{"progress":96.7}');
handle('{"group":"Spec::Runner::Options#remove_example_group","description":"should remove the ExampleGroup from the list of ExampleGroups","status":"passed"}');
handle('{"progress":96.7}');
handle('{"group":"Spec::Runner::Options#run_examples with global predicate matchers","description":"defines global predicate matcher methods on ExampleMethods","status":"passed"}');
handle('{"progress":96.8}');
handle('{"group":"Spec::Runner::Options#run_examples with a mock framework defined as a Symbol","description":"includes Spec::Adapters::MockFramework","status":"passed"}');
handle('{"progress":96.9}');
handle('{"group":"Spec::Runner::Options#run_examples with a mock framework defined as a Module","description":"includes the module in ExampleMethods","status":"passed"}');
handle('{"progress":96.9}');
handle('{"group":"Spec::Runner::Options#run_examples when not given a custom runner","description":"should use the standard","status":"passed"}');
handle('{"progress":97.0}');
handle('{"group":"Spec::Runner::Options#run_examples when given a custom runner","description":"should use the custom runner","status":"passed"}');
handle('{"progress":97.1}');
handle('{"group":"Spec::Runner::Options#run_examples when given a custom runner","description":"should use the custom runner with extra options","status":"passed"}');
handle('{"progress":97.1}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples","description":"runs the Examples and outputs the result","status":"passed"}');
handle('{"progress":97.2}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples","description":"sets #examples_run? to true","status":"passed"}');
handle('{"progress":97.3}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples and the suite passes","description":"invokes after_suite_parts with true","status":"passed"}');
handle('{"progress":97.3}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples and the suite fails","description":"invokes after_suite_parts with false","status":"passed"}');
handle('{"progress":97.4}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples when using heckle runner","description":"should heckle","status":"passed"}');
handle('{"progress":97.5}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples when using heckle runner","description":"shouldn\'t heckle recursively","status":"passed"}');
handle('{"progress":97.5}');
handle('{"group":"Spec::Runner::Options#run_examples when there are examples when using heckle runner","description":"shouldn\'t load spec files twice","status":"passed"}');
handle('{"progress":97.6}');
handle('{"group":"Spec::Runner::Options#run_examples when there are no examples","description":"does not run Examples and does not output a result","status":"passed"}');
handle('{"progress":97.7}');
handle('{"group":"Spec::Runner::Options#run_examples when there are no examples","description":"sets #examples_run? to false","status":"passed"}');
handle('{"progress":97.8}');
handle('{"group":"Spec::Runner::Options#run_examples when there are no examples","description":"invokes after_suite_parts with true","status":"passed"}');
handle('{"progress":97.8}');
handle('{"group":"Spec::Runner::Options#add_dir_from_project_root_to_load_path","description":"handles nil gracefully","status":"passed"}');
handle('{"progress":97.9}');
handle('{"group":"Spec::Runner::CommandLine","description":"should not output twice","status":"passed"}');
handle('{"progress":98.0}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"gracefully handles nil backtrace","status":"passed"}');
handle('{"progress":98.0}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"gracefully handle backtraces with newlines","status":"passed"}');
handle('{"progress":98.1}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"cleans up double slashes","status":"passed"}');
handle('{"progress":98.2}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"preserves lines from textmate ruby bundle","status":"passed"}');
handle('{"progress":98.2}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in lib/spec","status":"passed"}');
handle('{"progress":98.3}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in bin/spec","status":"passed"}');
handle('{"progress":98.4}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in mock_frameworks/rspec","status":"passed"}');
handle('{"progress":98.4}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes custom patterns","status":"passed"}');
handle('{"progress":98.5}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes custom patterns added as a string","status":"passed"}');
handle('{"progress":98.6}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in mock_frameworks/rspec","status":"passed"}');
handle('{"progress":98.6}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in rspec gem","status":"passed"}');
handle('{"progress":98.7}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in pre-release rspec gems","status":"passed"}');
handle('{"progress":98.8}');
handle('{"group":"Spec::Runner::QuietBacktraceTweaker","description":"removes lines in spork gem","status":"passed"}');
handle('{"progress":98.9}');
handle('{"group":"Spec::Runner::Reporter","description":"should assign itself as the reporter to options","status":"passed"}');
handle('{"progress":98.9}');
handle('{"group":"Spec::Runner::Reporter","description":"should tell formatter when example_group is added","status":"passed"}');
handle('{"progress":99.0}');
handle('{"group":"Spec::Runner::Reporter","description":"should handle multiple example_groups with same name","status":"passed"}');
handle('{"progress":99.1}');
handle('{"group":"Spec::Runner::Reporter","description":"should handle multiple examples with the same name","status":"passed"}');
handle('{"progress":99.1}');
handle('{"group":"Spec::Runner::Reporter","description":"should push stats to formatter even with no data","status":"passed"}');
handle('{"progress":99.2}');
handle('{"group":"Spec::Runner::Reporter","description":"should push time to formatter","status":"passed"}');
handle('{"progress":99.3}');
handle('{"group":"Spec::Runner::Reporter reporting one passing example","description":"should tell formatter example passed","status":"passed"}');
handle('{"progress":99.3}');
handle('{"group":"Spec::Runner::Reporter reporting one passing example","description":"should not delegate to backtrace tweaker","status":"passed"}');
handle('{"progress":99.4}');
handle('{"group":"Spec::Runner::Reporter reporting one passing example","description":"should account for passing example in stats","status":"passed"}');
handle('{"progress":99.5}');
handle('{"group":"Spec::Runner::Reporter reporting one failing example","description":"should tell formatter that example failed","status":"passed"}');
handle('{"progress":99.5}');
handle('{"group":"Spec::Runner::Reporter reporting one failing example","description":"should delegate to backtrace tweaker","status":"passed"}');
handle('{"progress":99.6}');
handle('{"group":"Spec::Runner::Reporter reporting one failing example","description":"should account for failing example in stats","status":"passed"}');
handle('{"progress":99.7}');
handle('{"group":"Spec::Runner::Reporter reporting one pending example (ExamplePendingError)","description":"should tell formatter example is pending","status":"passed"}');
handle('{"progress":99.7}');
handle('{"group":"Spec::Runner::Reporter reporting one pending example (ExamplePendingError)","description":"should account for pending example in stats","status":"passed"}');
handle('{"progress":99.8}');
handle('{"group":"Spec::Runner::Reporter reporting one pending example (ExamplePendingError) to formatters which have example_pending\'s arity of 3 (which is now deprecated)","description":"should pass the correct example description to the formatter","status":"passed"}');
handle('{"progress":99.9}');
handle('{"group":"Spec::Runner::Reporter reporting one pending example (ExamplePendingError) to formatters which have example_pending\'s arity of 3 (which is now deprecated)","description":"should pass the correct pending error message to the formatter","status":"passed"}');
handle('{"progress":100.0}');
handle('{"group":"Spec::Runner::Reporter reporting one pending example (ExamplePendingError) to formatters which have example_pending\'s arity of 3 (which is now deprecated)","description":"should raise a deprecation warning","status":"passed"}');
handle('{"progress":100.0}');
handle('{"group":"Spec::Runner::Reporter reporting one pending example (PendingExampleFixedError)","description":"should tell formatter pending example is fixed","status":"passed"}');
handle('{"progress":100.1}');
handle('{"group":"Spec::Runner.configure","description":"should yield global configuration","status":"passed"}');
handle('{"progress":100.2}');
handle('{"group":"bar","description":"foo","status":"passed"}');
handle('{"progress":100.2}');
handle('{"group":"bar","description":"foo","status":"passed"}');
handle('{"progress":100.3}');
handle('{"group":"bar","description":"foo","status":"passed"}');
handle('{"progress":100.4}');
handle('{"group":"bar","description":"foo","status":"passed"}');
handle('{"progress":100.4}');
handle('{"group":"bar","description":"foo","status":"passed"}');
handle('{"progress":100.5}');
handle('{"group":"bar","description":"foo","status":"passed"}');
handle('{"progress":100.6}');
handle('{"group":"Thing","description":"should == #&lt;Thing:0x19ad840 @arg=:default&gt;","status":"passed"}');
handle('{"progress":100.6}');
handle('{"group":"Thing","description":"should eql #&lt;Thing:0x19ad188 @arg=:default&gt;","status":"passed"}');
handle('{"progress":100.7}');
handle('{"group":"Thing","description":"should == #&lt;Thing:0x19a7af8 @arg=:other&gt;","status":"passed"}');
handle('{"progress":100.8}');
handle('{"group":"Thing","description":"should eql #&lt;Thing:0x19a742c @arg=:other&gt;","status":"passed"}');
handle('{"progress":100.8}');
handle('{"group":"Thing","description":"should == #&lt;#&lt;Class:0x19a3214&gt;:0x19a1f04 @_proxy=#&lt;Spec::Example::ExampleProxy:0x19a2cb0 @location=&quot;./spec/spec/example/example_methods_spec.rb:64&quot;, @description=nil, @options={}&gt;, @subject=#&lt;#&lt;Class:0x19a3214&gt;:0x19a1f04 ...&gt;, @_implementation=#&lt;Proc:0x01176d5c@./spec/spec/example/example_methods_spec.rb:64&gt;, @_backtrace=[&quot;/Users/mnutt/code/rspec/spec/spec_helper.rb:104:in `initialize\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:213:in `new\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:213:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `each\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:103:in `run\'&quot;, &quot;./spec/spec/example/example_methods_spec.rb:70&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_methods.rb:40:in `instance_eval\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_methods.rb:40:in `execute\'&quot;, &quot;/opt/local/lib/ruby/1.8/timeout.rb:53:in `timeout\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_methods.rb:37:in `execute\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:214:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `each\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:103:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/example_group_runner.rb:23:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/example_group_runner.rb:22:in `each\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/example_group_runner.rb:22:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/options.rb:151:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/command_line.rb:9:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/bin/spec:5&quot;]&gt;","status":"passed"}');
handle('{"progress":100.9}');
handle('{"group":"Thing","description":"should eql #&lt;#&lt;Class:0x19a3214&gt;:0x19a14dc @_proxy=#&lt;Spec::Example::ExampleProxy:0x19a2ae4 @location=&quot;./spec/spec/example/example_methods_spec.rb:65&quot;, @description=nil, @options={}&gt;, @subject=#&lt;#&lt;Class:0x19a3214&gt;:0x19a14dc ...&gt;, @_implementation=#&lt;Proc:0x01176c58@./spec/spec/example/example_methods_spec.rb:65&gt;, @_backtrace=[&quot;/Users/mnutt/code/rspec/spec/spec_helper.rb:104:in `initialize\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:213:in `new\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:213:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `each\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:103:in `run\'&quot;, &quot;./spec/spec/example/example_methods_spec.rb:70&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_methods.rb:40:in `instance_eval\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_methods.rb:40:in `execute\'&quot;, &quot;/opt/local/lib/ruby/1.8/timeout.rb:53:in `timeout\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_methods.rb:37:in `execute\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:214:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `each\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:212:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/example/example_group_methods.rb:103:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/example_group_runner.rb:23:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/example_group_runner.rb:22:in `each\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/example_group_runner.rb:22:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/options.rb:151:in `run_examples\'&quot;, &quot;/Users/mnutt/code/rspec/lib/spec/runner/command_line.rb:9:in `run\'&quot;, &quot;/Users/mnutt/code/rspec/bin/spec:5&quot;]&gt;","status":"passed"}');
handle('{"progress":101.0}');
handle('{"group":"Thing","description":"should be method ok","status":"passed"}');
handle('{"progress":101.0}');
handle('{"group":"Thing","description":"should not == #&lt;Thing:0x1999afc @arg=:other&gt;","status":"passed"}');
handle('{"progress":101.1}');
handle('{"group":"Thing","description":"should not eql #&lt;Thing:0x19991b0 @arg=:other&gt;","status":"passed"}');
handle('{"progress":101.2}');
handle('{"group":"Thing","description":"should not == #&lt;Thing:0x19939f4 @arg=:default&gt;","status":"passed"}');
handle('{"progress":101.3}');
handle('{"group":"Thing","description":"should not eql #&lt;Thing:0x1993238 @arg=:default&gt;","status":"passed"}');
handle('{"progress":101.3}');
handle('{"group":"Thing","description":"should not == #&lt;Thing:0x198d554 @arg=:default&gt;","status":"passed"}');
handle('{"progress":101.4}');
handle('{"group":"Thing","description":"should not eql #&lt;Thing:0x198ce4c @arg=:default&gt;","status":"passed"}');
handle('{"progress":101.5}');
handle('{"group":"Thing","description":"should not be method ok","status":"passed"}');
handle('{"progress":101.5}');
handle('{"group":"Spec::Example::Fish","description":"should be can swim 100","status":"passed"}');
handle('{"progress":101.6}');
handle('{"group":"Spec::Example::Fish","description":"should not be can swim 1000","status":"passed"}');
handle('{"progress":101.7}');
handle('{"group":"#<Class:0x1201da8>","description":"when called in one example that doesn\'t end up setting an expectation on nil","status":"passed"}');
handle('{"progress":101.7}');
handle('{"group":"#<Class:0x1201da8>","description":"should not effect the next exapmle ran","status":"passed"}');
handle('{"progress":101.8}');
handle('{"group":"A","description":"a1","status":"passed"}');
handle('{"progress":101.9}');
handle('{"group":"A B","description":"b2","status":"passed"}');
handle('{"progress":101.9}');
handle('{"group":"A B","description":"b3","status":"passed"}');
handle('{"progress":102.0}');
handle('{"group":"example_group","description":"example","status":"passed"}');
handle('{"progress":102.1}');
handle('{"group":"example_group","description":"example","status":"passed"}');
handle('{"progress":102.1}');
handle('{"group":"Some Examples","description":"uses this example_group 1","status":"passed"}');
handle('{"progress":102.2}');
handle('{"group":"Some Examples","description":"uses this example_group 2","status":"passed"}');
handle('{"progress":102.3}');
handle('{"group":"Some Examples","description":"uses this example_group 3","status":"passed"}');
handle('{"progress":102.4}');
handle('{"group":"Some Examples","description":"runs 1","status":"passed"}');
handle('{"progress":102.4}');
handle('{"group":"Some Examples","description":"runs 2","status":"passed"}');
handle('{"progress":102.5}');
handle('{"group":"Some Examples","description":"runs 1","status":"passed"}');
handle('{"progress":102.6}');
handle('{"group":"Some Examples","description":"runs 2","status":"passed"}');
handle('{"progress":102.6}');
handle('{"group":"Some Examples","description":"uses this example_group","status":"passed"}');
handle('{"progress":102.7}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":102.8}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":102.8}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":102.9}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.0}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.0}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.1}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.2}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.2}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.3}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.4}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.5}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.5}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.6}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.7}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.7}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.8}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.9}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":103.9}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":104.0}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":104.1}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":104.1}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":104.2}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"progress":104.3}');
handle('{"group":"example_group","description":"should do something","status":"passed"}');
handle('{"event":"finish"}');
